From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 1 Sep 2024 17:14:34 +0800
Subject: [PATCH] Reflect utils


diff --git a/src/main/kotlin/one/tranic/vine/util/Reflect.kt b/src/main/kotlin/one/tranic/vine/util/Reflect.kt
new file mode 100644
index 0000000000000000000000000000000000000000..3098e065dce949090c578f7f891ffa93d97cd51c
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/util/Reflect.kt
@@ -0,0 +1,57 @@
+package one.tranic.vine.util
+
+import com.google.common.reflect.ClassPath
+import java.io.IOException
+import kotlin.reflect.full.createInstance
+import kotlin.reflect.full.isSubclassOf
+
+
+object Reflect {
+    @Throws(IOException::class)
+    inline fun <reified T> findObjectClass(packageName: String): Set<T> {
+        return findClass<T>(packageName, isObject = true, allClass = false)
+    }
+
+    @Throws(IOException::class)
+    inline fun <reified T> findAllObjectClass(packageName: String): Set<T> {
+        return findClass<T>(packageName, isObject = true, allClass = true)
+    }
+
+    @Throws(IOException::class)
+    inline fun <reified T> findClass(packageName: String): Set<T> {
+        return findClass<T>(packageName, isObject = false, allClass = false)
+    }
+
+    @Throws(IOException::class)
+    inline fun <reified T> findAllClass(packageName: String): Set<T> {
+        return findClass<T>(packageName, isObject = false, allClass = true)
+    }
+
+    @Throws(IOException::class)
+    inline fun <reified T> findClass(packageName: String, isObject: Boolean, allClass: Boolean): Set<T> {
+        val implSet = mutableSetOf<T>()
+        val classs = ClassPath.from(Thread.currentThread().contextClassLoader)
+        val classes = if (allClass) {
+            classs.getTopLevelClassesRecursive(packageName)
+        } else {
+            classs.getTopLevelClasses(packageName)
+        }
+        for (classInfo in classes) {
+            val clazz = Class.forName(classInfo.name).kotlin
+            runCatching {
+                if (!clazz.isSubclassOf(T::class)) return@runCatching
+                val objInstance: T? = if (isObject && clazz.objectInstance != null) {
+                    clazz.objectInstance as T
+                } else if (!clazz.isData && !clazz.isFun && !clazz.isValue) {
+                    clazz.createInstance() as T
+                } else {
+                    null
+                }
+                if (objInstance != null) {
+                    implSet.add(objInstance)
+                }
+            }.getOrElse {}
+        }
+        return implSet
+    }
+}
\ No newline at end of file
