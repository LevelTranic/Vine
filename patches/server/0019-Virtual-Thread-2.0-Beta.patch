From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 8 Sep 2024 10:40:23 +0800
Subject: [PATCH] Virtual Thread 2.0 (Beta)


diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 43d74fb4fb2ea94276db50352ba1d7effd71e794..f7d60526c4c8cfc2a070a6f4d4ef9be7ad165337 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -12,11 +12,12 @@ import io.multipaper.shreddedpaper.threading.ShreddedPaperTickThread;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 
-public final class WatchdogThread extends io.papermc.paper.util.TickThread // Paper - rewrite chunk system
+public final class WatchdogThread implements Runnable // Paper - rewrite chunk system
 {
 
     public static final boolean DISABLE_WATCHDOG = Boolean.getBoolean("disable.watchdog"); // Paper
     private static WatchdogThread instance;
+    private static Thread thread;
     private long timeoutTime;
     private boolean restart;
     private final long earlyWarningEvery; // Paper - Timeout time for just printing a dump but not restarting
@@ -100,7 +101,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
 
     private WatchdogThread(long timeoutTime, boolean restart)
     {
-        super( "Watchdog Thread" ); // Purpur - use a generic name
+        thread = one.tranic.vine.util.AnyThread.getThread2(this, "Watchdog Thread"); // Vine - Vt2
         this.timeoutTime = timeoutTime;
         this.restart = restart;
         earlyWarningEvery = Math.min(io.papermc.paper.configuration.GlobalConfiguration.get().watchdog.earlyWarningEvery, timeoutTime); // Paper
@@ -118,7 +119,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
         {
             if (timeoutTime <= 0) timeoutTime = 300; // Paper
             WatchdogThread.instance = new WatchdogThread( timeoutTime * 1000L, restart );
-            WatchdogThread.instance.start();
+            WatchdogThread.thread.start();
         } else
         {
             WatchdogThread.instance.timeoutTime = timeoutTime * 1000L;
@@ -157,35 +158,35 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                 if ( !isLongTimeout && server.hasStopped()) continue; // Don't spam early watchdog warnings during shutdown, we'll come back to this...
                 lastEarlyWarning = currentTime;
                 if (isLongTimeout) {
-                // Paper end
-                log.log( Level.SEVERE, "------------------------------" );
-                log.log( Level.SEVERE, "The server has stopped responding! This is (probably) not a Vine bug." ); // Paper // Purpur // ShreddedPaper // Vine
-                log.log( Level.SEVERE, "If you see a plugin in the Server thread dump below, then please report it to that author" );
-                log.log( Level.SEVERE, "\t *Especially* if it looks like HTTP or MySQL operations are occurring" );
-                log.log( Level.SEVERE, "If you see a world save or edit, then it means you did far more than your server can handle at once" );
-                log.log( Level.SEVERE, "\t If this is the case, consider increasing timeout-time in spigot.yml but note that this will replace the crash with LARGE lag spikes" );
-                log.log( Level.SEVERE, "If you are unsure or still think this is a Vine bug, please report this to https://github.com/LevelTranic/Vine/issues" ); // Purpur // ShreddedPaper // Vine
-                log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
-                log.log( Level.SEVERE, "ShreddedPaper version: " + Bukkit.getServer().getVersion() ); // Purpur // ShreddedPaper
-                //
-                if ( net.minecraft.world.level.Level.lastPhysicsProblem != null )
-                {
+                    // Paper end
                     log.log( Level.SEVERE, "------------------------------" );
-                    log.log( Level.SEVERE, "During the run of the server, a physics stackoverflow was supressed" );
-                    log.log( Level.SEVERE, "near " + net.minecraft.world.level.Level.lastPhysicsProblem );
-                }
-                //
-                // Paper start - Warn in watchdog if an excessive velocity was ever set
-                if (org.bukkit.craftbukkit.CraftServer.excessiveVelEx != null) {
-                    log.log(Level.SEVERE, "------------------------------");
-                    log.log(Level.SEVERE, "During the run of the server, a plugin set an excessive velocity on an entity");
-                    log.log(Level.SEVERE, "This may be the cause of the issue, or it may be entirely unrelated");
-                    log.log(Level.SEVERE, org.bukkit.craftbukkit.CraftServer.excessiveVelEx.getMessage());
-                    for (StackTraceElement stack : org.bukkit.craftbukkit.CraftServer.excessiveVelEx.getStackTrace()) {
-                        log.log( Level.SEVERE, "\t\t" + stack );
+                    log.log( Level.SEVERE, "The server has stopped responding! This is (probably) not a Vine bug." ); // Paper // Purpur // ShreddedPaper // Vine
+                    log.log( Level.SEVERE, "If you see a plugin in the Server thread dump below, then please report it to that author" );
+                    log.log( Level.SEVERE, "\t *Especially* if it looks like HTTP or MySQL operations are occurring" );
+                    log.log( Level.SEVERE, "If you see a world save or edit, then it means you did far more than your server can handle at once" );
+                    log.log( Level.SEVERE, "\t If this is the case, consider increasing timeout-time in spigot.yml but note that this will replace the crash with LARGE lag spikes" );
+                    log.log( Level.SEVERE, "If you are unsure or still think this is a Vine bug, please report this to https://github.com/LevelTranic/Vine/issues" ); // Purpur // ShreddedPaper // Vine
+                    log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
+                    log.log( Level.SEVERE, "ShreddedPaper version: " + Bukkit.getServer().getVersion() ); // Purpur // ShreddedPaper
+                    //
+                    if ( net.minecraft.world.level.Level.lastPhysicsProblem != null )
+                    {
+                        log.log( Level.SEVERE, "------------------------------" );
+                        log.log( Level.SEVERE, "During the run of the server, a physics stackoverflow was supressed" );
+                        log.log( Level.SEVERE, "near " + net.minecraft.world.level.Level.lastPhysicsProblem );
                     }
-                }
-                // Paper end
+                    //
+                    // Paper start - Warn in watchdog if an excessive velocity was ever set
+                    if (org.bukkit.craftbukkit.CraftServer.excessiveVelEx != null) {
+                        log.log(Level.SEVERE, "------------------------------");
+                        log.log(Level.SEVERE, "During the run of the server, a plugin set an excessive velocity on an entity");
+                        log.log(Level.SEVERE, "This may be the cause of the issue, or it may be entirely unrelated");
+                        log.log(Level.SEVERE, org.bukkit.craftbukkit.CraftServer.excessiveVelEx.getMessage());
+                        for (StackTraceElement stack : org.bukkit.craftbukkit.CraftServer.excessiveVelEx.getStackTrace()) {
+                            log.log( Level.SEVERE, "\t\t" + stack );
+                        }
+                    }
+                    // Paper end
                 } else
                 {
                     log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO VINE - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur // ShreddedPaper // Vine
@@ -207,12 +208,12 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                 // Paper start - Only print full dump on long timeouts
                 if ( isLongTimeout )
                 {
-                log.log( Level.SEVERE, "Entire Thread Dump:" );
-                ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads( true, true );
-                for ( ThreadInfo thread : threads )
-                {
-                    WatchdogThread.dumpThread( thread, log );
-                }
+                    log.log( Level.SEVERE, "Entire Thread Dump:" );
+                    ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads( true, true );
+                    for ( ThreadInfo thread : threads )
+                    {
+                        WatchdogThread.dumpThread( thread, log );
+                    }
                 } else {
                     log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO VINE - THIS IS NOT A BUG OR A CRASH ---"); // Purpur // ShreddedPaper // Vine
                 }
@@ -221,46 +222,61 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
 
                 if ( isLongTimeout )
                 {
-                if ( !server.hasStopped() )
-                {
-                    AsyncCatcher.enabled = false; // Disable async catcher incase it interferes with us
-                    server.forceTicks = true;
-                    if (restart) {
-                        RestartCommand.addShutdownHook( SpigotConfig.restartScript );
-                    }
-                    // try one last chance to safe shutdown on main incase it 'comes back'
-                    server.abnormalExit = true;
-                    server.safeShutdown(false, restart);
-                    try {
-                        Thread.sleep(1000);
-                    } catch (InterruptedException e) {
-                        e.printStackTrace();
-                    }
-                    if (!server.hasStopped()) {
-                        server.close();
+                    if ( !server.hasStopped() )
+                    {
+                        AsyncCatcher.enabled = false; // Disable async catcher incase it interferes with us
+                        server.forceTicks = true;
+                        if (restart) {
+                            RestartCommand.addShutdownHook( SpigotConfig.restartScript );
+                        }
+                        // try one last chance to safe shutdown on main incase it 'comes back'
+                        server.abnormalExit = true;
+                        server.safeShutdown(false, restart);
+                        try {
+                            Thread.sleep(1000);
+                        } catch (InterruptedException e) {
+                            e.printStackTrace();
+                        }
+                        if (!server.hasStopped()) {
+                            server.close();
+                        }
                     }
-                }
-                break;
+                    break;
                 } // Paper end
             }
 
             try
             {
-                sleep( 1000 ); // Paper - Reduce check time to every second instead of every ten seconds, more consistent and allows for short timeout
+                thread.sleep( 1000 ); // Paper - Reduce check time to every second instead of every ten seconds, more consistent and allows for short timeout
             } catch ( InterruptedException ex )
             {
-                this.interrupt();
+                thread.interrupt();
             }
         }
     }
 
+    // Vine start - remove stream
     private List<ThreadInfo> getStuckTickWorkerThreads() {
-        ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads( true, true );
-        return Arrays.stream(threads)
-                .filter(thread -> thread.getThreadName().startsWith("ShreddedPaperTickThread"))
-                .filter(thread -> Arrays.stream(thread.getStackTrace()).anyMatch(stack -> !stack.getClassName().startsWith("java") && !stack.getClassName().startsWith("jdk")))
-                .toList();
+        ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads(true, true);
+        List<ThreadInfo> result = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>();
+
+        for (ThreadInfo thread : threads) {
+            if (thread.getThreadName().startsWith("ShreddedPaperTickThread")) {
+                boolean hasRelevantStackTrace = false;
+                for (StackTraceElement stack : thread.getStackTrace()) {
+                    if (!stack.getClassName().startsWith("java") && !stack.getClassName().startsWith("jdk")) {
+                        hasRelevantStackTrace = true;
+                        break;
+                    }
+                }
+                if (hasRelevantStackTrace) {
+                    result.add(thread);
+                }
+            }
+        }
+        return result;
     }
+    // Vine end - remove stream
 
     private static void dumpThread(ThreadInfo thread, Logger log)
     {
