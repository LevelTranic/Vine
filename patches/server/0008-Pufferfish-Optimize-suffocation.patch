From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 7 Jul 2024 19:51:37 +0800
Subject: [PATCH] Pufferfish: Optimize suffocation

Original code by Kevin Raneri <kevin.raneri@gmail.com>
You can find the original code on https://github.com/pufferfish-gg/Pufferfish

The isInWall check to determine suffocation is quite expensive, and
often is completely unnecessary to check. We do two things here to
improve this:

1. We only check for suffocation once per 20 ticks. The maximum
no-damage ticks value means that this change should be extremely
difficult, if not impossible, for players to notice.

2. We additionally execute a check to see if the player can even take
damage in the first place. This check doesn't improve performance much
but is so much cheaper than the suffocation check that it's worth
keeping it.

diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b02568c6568af81a631033594880002a4a8caeea..3667e9ce846460dfa56de1a48b5690063b3c1b7b 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -141,7 +141,7 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.entity.ArrowBodyCountChangeEvent;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
-import org.bukkit.event.entity.EntityKnockbackEvent;
+// import org.bukkit.event.entity.EntityKnockbackEvent;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
 import org.bukkit.event.entity.EntityRemoveEvent;
@@ -150,7 +150,7 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
+//import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class LivingEntity extends Entity implements Attackable {
 
@@ -432,7 +432,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
             if (!this.level().isClientSide) {
-                if (this.isInWall()) {
+                if (shouldCheckForSuffocation() && this.isInWall()) { // Pufferfish - optimize suffocation
                     this.hurt(this.damageSources().inWall(), 1.0F);
                 } else if (flag && !this.level().getWorldBorder().isWithinBounds(this.getBoundingBox())) {
                     double d0 = this.level().getWorldBorder().getDistanceToBorder(this) + this.level().getWorldBorder().getDamageSafeZone();
@@ -791,11 +791,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     public void remove(Entity.RemovalReason entity_removalreason, EntityRemoveEvent.Cause cause) {
         // CraftBukkit end
         if (entity_removalreason == Entity.RemovalReason.KILLED || entity_removalreason == Entity.RemovalReason.DISCARDED) {
-            Iterator iterator = this.getActiveEffects().iterator();
-
-            while (iterator.hasNext()) {
-                MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
-
+            for (MobEffectInstance mobeffect : this.getActiveEffects()) {
                 mobeffect.onMobRemoved(this, entity_removalreason);
             }
         }
@@ -819,11 +815,8 @@ public abstract class LivingEntity extends Entity implements Attackable {
         nbt.put("Attributes", this.getAttributes().save());
         if (!this.activeEffects.isEmpty()) {
             ListTag nbttaglist = new ListTag();
-            Iterator iterator = this.activeEffects.values().iterator();
-
-            while (iterator.hasNext()) {
-                MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
 
+            for (MobEffectInstance mobeffect : this.activeEffects.values()) {
                 nbttaglist.add(mobeffect.save());
             }
 
@@ -1324,16 +1317,11 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public void sendEffectToPassengers(MobEffectInstance effect) {
-        Iterator iterator = this.getPassengers().iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
-
+        for (Entity entity : this.getPassengers()) {
             if (entity instanceof ServerPlayer entityplayer) {
                 entityplayer.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), effect, false));
             }
         }
-
     }
 
     protected void onEffectUpdated(MobEffectInstance effect, boolean reapplyEffect, @Nullable Entity source) {
@@ -1357,14 +1345,9 @@ public abstract class LivingEntity extends Entity implements Attackable {
         if (!this.level().isClientSide) {
             ((MobEffect) effect.getEffect().value()).removeAttributeModifiers(this.getAttributes());
             this.refreshDirtyAttributes();
-            Iterator iterator = this.getPassengers().iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
-
-                if (entity instanceof ServerPlayer) {
-                    ServerPlayer entityplayer = (ServerPlayer) entity;
 
+            for (Entity entity : this.getPassengers()) {
+                if (entity instanceof ServerPlayer entityplayer) {
                     entityplayer.connection.send(new ClientboundRemoveMobEffectPacket(this.getId(), effect.getEffect()));
                 }
             }
@@ -1373,14 +1356,9 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     private void refreshDirtyAttributes() {
-        Iterator iterator = this.getAttributes().getDirtyAttributes().iterator();
-
-        while (iterator.hasNext()) {
-            AttributeInstance attributemodifiable = (AttributeInstance) iterator.next();
-
+        for (AttributeInstance attributemodifiable : this.getAttributes().getDirtyAttributes()) {
             this.onAttributeUpdated(attributemodifiable.getAttribute());
         }
-
     }
 
     private void onAttributeUpdated(Holder<Attribute> attribute) {
@@ -1466,6 +1444,19 @@ public abstract class LivingEntity extends Entity implements Attackable {
         return this.getHealth() <= 0.0F;
     }
 
+    // Pufferfish start - optimize suffocation
+    public boolean couldPossiblyBeHurt(float amount) {
+        if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && amount <= this.lastHurt) {
+            return false;
+        }
+        return true;
+    }
+
+    public boolean shouldCheckForSuffocation() {
+        return !gg.pufferfish.pufferfish.PufferfishConfig.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F));
+    }
+    // Pufferfish end
+
     @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.isInvulnerableTo(source)) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 4a98027a12c2535d1df3a9f6390eb85146398403..9facda1076794b9efe9a43e2d5f032246e8ee59e 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -295,6 +295,13 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
         this.bossEvent.setName(this.getDisplayName());
     }
 
+    // Pufferfish start - optimize suffocation
+    @Override
+    public boolean shouldCheckForSuffocation() {
+        return true;
+    }
+    // Pufferfish end
+
     @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.WITHER_AMBIENT;
