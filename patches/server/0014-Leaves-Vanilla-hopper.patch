From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Fri, 26 Jan 2024 01:36:34 +0800
Subject: [PATCH] Leaves: Vanilla hopper

This is a temporary solution designed to attempt to restore the vanilla behavior of the funnel while preserving optimizations as much as possible. It should ultimately be replaced

diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 460e6111aca479334210f2524c13ab0c9fc3482c..18e22804115edcf5d77557fae6fb4c4d4f38fdf9 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -290,36 +290,46 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         ItemStack movedItem = origItemStack;
         final int originalItemCount = origItemStack.getCount();
         final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
-        container.setChanged(); // original logic always marks source inv as changed even if no move happens.
-        movedItem.setCount(movedItemCount);
-
-        if (!skipPullModeEventFireThreadLocal.get()) { // ShreddedPaper - use thread local for skipPullModeEventFire
-            movedItem = callPullMoveEvent(hopper, container, movedItem);
-            if (movedItem == null) { // cancelled
-                origItemStack.setCount(originalItemCount);
-                // Drastically improve performance by returning true.
-                // No plugin could of relied on the behavior of false as the other call
-                // site for IMIE did not exhibit the same behavior
+        // Leaves start - fix vanilla
+        if (one.tranic.vine.config.VineConfig.Feature.vanillaHopper && movedItem.getCount() <= movedItemCount) {
+            movedItem = origItemStack.copy();
+            final ItemStack remainingItem = addItem(container, hopper, container.removeItem(i, movedItemCount), null);
+            if (remainingItem.isEmpty()) {
+                container.setChanged();
                 return true;
             }
-        }
-
-        final ItemStack remainingItem = addItem(container, hopper, movedItem, null);
-        final int remainingItemCount = remainingItem.getCount();
-        if (remainingItemCount != movedItemCount) {
-            origItemStack = origItemStack.copy(true);
-            origItemStack.setCount(originalItemCount);
-            if (!origItemStack.isEmpty()) {
-                origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
+            container.setItem(i, movedItem);
+        } else {
+            container.setChanged(); // original logic always marks source inv as changed even if no move happens.
+            movedItem.setCount(movedItemCount);
+            if (!skipPullModeEventFireThreadLocal.get()) { // ShreddedPaper - use thread local for skipPullModeEventFire
+                movedItem = callPullMoveEvent(hopper, container, movedItem);
+                if (movedItem == null) { // cancelled
+                    origItemStack.setCount(originalItemCount);
+                    // Drastically improve performance by returning true.
+                    // No plugin could of relied on the behavior of false as the other call
+                    // site for IMIE did not exhibit the same behavior
+                    return true;
+                }
             }
+            final ItemStack remainingItem = addItem(container, hopper, movedItem, null);
+            final int remainingItemCount = remainingItem.getCount();
+            if (remainingItemCount != movedItemCount) {
+                origItemStack = origItemStack.copy(true);
+                origItemStack.setCount(originalItemCount);
+                if (!origItemStack.isEmpty()) {
+                    origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
+                }
 
-            ignoreTileUpdatesThreadLocal.set(true); // ShreddedPaper - use thread local for ignoreTileUpdates
-            container.setItem(i, origItemStack);
-            ignoreTileUpdatesThreadLocal.set(false); // ShreddedPaper - use thread local for ignoreTileUpdates
-            container.setChanged();
-            return true;
+                ignoreTileUpdatesThreadLocal.set(true); // ShreddedPaper - use thread local for ignoreTileUpdates
+                container.setItem(i, origItemStack);
+                ignoreTileUpdatesThreadLocal.set(false); // ShreddedPaper - use thread local for ignoreTileUpdates
+                container.setChanged();
+                return true;
+            }
+            origItemStack.setCount(originalItemCount);
         }
-        origItemStack.setCount(originalItemCount);
+        // Leaves end - fix vanilla
 
         if (level.paperConfig().hopper.cooldownWhenFull) {
             cooldownHopper(hopper);
