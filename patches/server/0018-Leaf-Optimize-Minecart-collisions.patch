From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Sat, 6 Apr 2024 22:57:41 -0400
Subject: [PATCH] Leaf: Optimize Minecart collisions

Original code by MrHua269 <wangxyper@163.com>
You can find the original code on https://github.com/Winds-Studio/Leaf

Skip tick collisions to to prevent lag causing by massive stacked Minecart
Useful for anarchy server.

diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index f1b9e83206cc67e6ef29ebe088351b0aaa5eb349..e0a51e269aa076def275710174d3654d07e1a7aa 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -63,6 +63,13 @@ public final class EntitySelector {
     }
     public static Predicate<Entity> pushable(Entity entity, boolean ignoreClimbing) {
         // Paper end - Climbing should not bypass cramming gamerule
+
+        // Leaf start - Optimize Minecart collisions
+        if (entity instanceof net.minecraft.world.entity.vehicle.AbstractMinecart) {
+            return x -> true;
+        }
+        // Leaf end - Optimize Minecart collisions
+
         PlayerTeam scoreboardteam = entity.getTeam();
         Team.CollisionRule scoreboardteambase_enumteampush = scoreboardteam == null ? Team.CollisionRule.ALWAYS : scoreboardteam.getCollisionRule();
 
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index de2ea35a226c5f595a2ab53beda8238a806c2bad..bfc4a4b3dcccdef3a3a5036716adf4e01cf641b2 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -386,15 +386,16 @@ public abstract class AbstractMinecart extends VehicleEntity {
                 this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
             }
             // CraftBukkit end
-            if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
+            // Leaf start - Optimize Minecart collision handling
+            // The logic below is used to get list of entities around Minecart
+            // and handle behaviors for their collisions with each other
+            if (!one.tranic.vine.config.VineConfig.Optimize.Minecart.enabled || this.tickCount % one.tranic.vine.config.VineConfig.Optimize.Minecart.skipTickCount == 0) {
+                if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && (one.tranic.vine.config.VineConfig.Optimize.Minecart.enabled || this.getDeltaMovement().horizontalDistanceSqr() > 0.01D)) {
                 List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
 
                 if (!list.isEmpty()) {
-                    Iterator iterator = list.iterator();
-
-                    while (iterator.hasNext()) {
-                        Entity entity = (Entity) iterator.next();
 
+                    for (Entity entity : list) {
                         if (!(entity instanceof Player) && !(entity instanceof IronGolem) && !(entity instanceof AbstractMinecart) && !this.isVehicle() && !entity.isPassenger()) {
                             // CraftBukkit start
                             VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
@@ -421,21 +422,19 @@ public abstract class AbstractMinecart extends VehicleEntity {
                     }
                 }
             } else {
-                Iterator iterator1 = this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
-
-                while (iterator1.hasNext()) {
-                    Entity entity1 = (Entity) iterator1.next();
 
-                    if (!this.hasPassenger(entity1) && entity1.isPushable() && entity1 instanceof AbstractMinecart) {
-                        // CraftBukkit start
-                        VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
-                        this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
+                    for (Entity entity1 : this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D))) {
+                        if (!this.hasPassenger(entity1) && entity1.isPushable() && entity1 instanceof AbstractMinecart) {
+                            // CraftBukkit start
+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                            this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
 
-                        if (collisionEvent.isCancelled()) {
-                            continue;
+                            if (collisionEvent.isCancelled()) {
+                                continue;
+                            }
+                            // CraftBukkit end
+                            entity1.push(this);
                         }
-                        // CraftBukkit end
-                        entity1.push(this);
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 0af343050a13371b86379a794caeb8dfeeb8550b..792404c66289a515ffa64169ce82496bb67835aa 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -7,7 +7,7 @@ import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Objects;
-import java.util.Set;
+// import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 import io.multipaper.shreddedpaper.region.LevelChunkRegion;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
+// import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -29,14 +29,14 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import io.papermc.paper.util.MCUtil;
+// import io.papermc.paper.util.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
-import net.minecraft.util.AbortableIterationConsumer;
+// import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -45,8 +45,8 @@ import net.minecraft.world.TickRateManager;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+// import net.minecraft.world.entity.boss.EnderDragonPart;
+// import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -1567,13 +1567,13 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.getChunk(chunkX, chunkZ, ChunkStatus.FULL, false);
     }
 
-    @Override
-    public List<Entity> getEntities(@Nullable Entity except, AABB box, Predicate<? super Entity> predicate) {
+    @Override // Leaf start - Optimize predicate call
+    public List<Entity> getEntities(@Nullable Entity except, AABB box, @Nullable Predicate<? super Entity> predicate) {
         //this.getProfiler().incrementCounter("getEntities"); // Purpur
         List<Entity> list = Lists.newArrayList();
-        ((ServerLevel)this).getEntityLookup().getEntities(except, box, list, predicate); // Paper - optimise this call
-        return list;
-    }
+        ((ServerLevel) this).getEntityLookup().getEntities(except, box, list, null); // Paper - optimise this call
+        return predicate != null ? list.stream().filter(predicate).toList() : list;
+    } // Leaf end
 
     @Override
     public <T extends Entity> List<T> getEntities(EntityTypeTest<Entity, T> filter, AABB box, Predicate<? super T> predicate) {
