From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 23 Jun 2024 21:01:06 +0800
Subject: [PATCH] Vine Config


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index b35a9f4c5f8960864c402ede8a51fb5ab9c4fcc0..e4b367b51bfae3f9f03227ebadca65e965513ea8 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -241,7 +241,8 @@ public class TimingsExport extends Thread {
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Pufferfish
-            pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)) // Pufferfish
+            pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)), // Pufferfish
+            pair("vine", mapAsJSON(one.tranic.vine.config.VineConfig.getConfigCopy(), null)) // Vine
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a7ffbbfd2a9fdeae0953ec8753ce48e93ccce086..32d9eba81500be7ab64bd027499c96f6804a68cd 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -58,6 +58,7 @@ import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.LevelSummary;
 import net.minecraft.world.level.storage.PrimaryLevelData;
+import one.tranic.vine.config.VineConfig;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -121,6 +122,8 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            VineConfig.load(); // Vine - load config
+
             ShreddedPaperConfigurationLoader.init((File) optionset.valueOf("shreddedpaper-settings")); // ShreddedPaper
 
             // Purpur start - load config files early
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d281fe5f75f6f99f869fa3cc8da4f1ff9f96a7bf..09c17974579797588d5fbd290bc2ce9b3ebab89b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,20 +1,14 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
@@ -55,6 +49,7 @@ import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import one.tranic.vine.config.VineConfig;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -63,9 +58,6 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
-import org.bukkit.craftbukkit.util.TerminalCompletionHandler;
-import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable; // Paper
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -224,6 +216,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
         this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
         // Paper end - initialize global and world-defaults configuration
+
+        VineConfig.setCommand();
+
         // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
             this.getProfileCache().save(false); // Paper
diff --git a/src/main/kotlin/one/tranic/vine/commands/VineCfgCommand.kt b/src/main/kotlin/one/tranic/vine/commands/VineCfgCommand.kt
new file mode 100644
index 0000000000000000000000000000000000000000..6feb7269907d2c88a9eb5b52204e55c10a8b7262
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/commands/VineCfgCommand.kt
@@ -0,0 +1,34 @@
+package one.tranic.vine.commands
+
+import one.tranic.vine.config.VineConfig
+import org.bukkit.command.Command
+import org.bukkit.command.CommandSender
+import net.kyori.adventure.text.Component
+import net.kyori.adventure.text.format.TextColor
+
+class VineCfgCommand : Command("vinecfg") {
+    init {
+        this.permission = "vine.commands.cfg"
+        this.setDescription("Manage config file")
+        this.setUsage("/vinecfg")
+    }
+
+    override fun execute(sender: CommandSender, commandLabel: String, args: Array<String>): Boolean {
+        if (!this.testPermission(sender)) {
+            sender.sendMessage(
+                Component
+                    .text("No permission to execute this command!")
+                    .color(TextColor.color(255, 0, 0))
+            )
+        }
+
+        VineConfig.reload()
+
+        sender.sendMessage(
+            Component
+                .text("Reloaded Vine config file!")
+                .color(TextColor.color(0, 255, 0))
+        )
+        return true
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/VineConfig.kt b/src/main/kotlin/one/tranic/vine/config/VineConfig.kt
new file mode 100644
index 0000000000000000000000000000000000000000..93ebb1bea6dead5dcfe13f3db144846cc3bd550b
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/VineConfig.kt
@@ -0,0 +1,313 @@
+package one.tranic.vine.config
+
+import net.minecraft.server.MinecraftServer
+import one.tranic.vine.commands.VineCfgCommand
+import org.bukkit.Bukkit
+import org.bukkit.configuration.ConfigurationSection
+import org.bukkit.configuration.MemoryConfiguration
+import org.bukkit.configuration.file.YamlConfiguration
+import java.io.File
+
+object VineConfig {
+    val logger: org.slf4j.Logger = MinecraftServer.LOGGER
+    private lateinit var configuration: YamlConfiguration
+    private var isSecureSeed: Boolean? = null
+
+    @JvmStatic
+    fun setCommand() {
+        Bukkit.getCommandMap().register("vinecfg", "vine", VineCfgCommand())
+    }
+
+    @JvmStatic
+    fun getConfigCopy(): ConfigurationSection {
+        return convertToBukkit(configuration.parent)
+    }
+
+    private fun convertToBukkit(section: ConfigurationSection?): ConfigurationSection {
+        val newSection: ConfigurationSection = MemoryConfiguration()
+        if (section != null) {
+            for (key in section.getKeys(false)) {
+                if (section.isConfigurationSection(key)) {
+                    newSection[key] = convertToBukkit(section.getConfigurationSection(key))
+                } else {
+                    newSection[key] = section[key]
+                }
+            }
+        }
+        return newSection
+    }
+
+    @JvmStatic
+    fun reload() {
+        runCatching {
+            val configFile = File("vine.yml")
+            if (!configFile.exists()) {
+                configFile.createNewFile()
+            }
+            configuration = YamlConfiguration.loadConfiguration(configFile)
+            addDefault(configFile)
+            loadConfigValue()
+        }.getOrElse {
+            throw RuntimeException(it)
+        }
+    }
+
+    @JvmStatic
+    fun load() {
+        reload()
+        reload()
+    }
+
+    private fun addDefault(configFile: File) {
+        configuration.options().setHeader(
+            listOf(
+                "Vine Abstract Configuration",
+                "Vine Github: https://github.com/LevelTranic/Vine",
+                "It is recommended to always keep the latest version, download it at https://tranic.one/downloads/vine"
+            )
+        )
+
+        addDefault(
+            "fix.incorrect-bounce-logic",
+            false,
+            listOf(
+                "Fixes some entities not bouncing on slime blocks and getting stuck",
+                "Fixes: https://bugs.mojang.com/browse/MC-216985"
+            )
+        )
+        addDefault(
+            "fix.explosion-breaks-item-frame-in-water",
+            false,
+            listOf(
+                "Fixes Explosions being able to destroy item frames in water",
+                "Fixes: https://bugs.mojang.com/browse/MC-3697"
+            )
+        )
+
+        addDefault(
+            "fix.anvil-drop.enabled",
+            true,
+            listOf(
+                "This fix will attempt to prevent the bug in https://github.com/PaperMC/Folia/issues/217, ",
+                "it may cause some unexpected effects but should be harmless."
+            )
+        )
+        addDefault(
+            "fix.anvil-drop.debug", false,
+            "Whether to print detailed information to the console when this issue is triggered"
+        )
+        addDefault("fix.network", false, "This is a testing option, if you don't know what it does, don't enable it.")
+
+        addDefault(
+            "feature.dont-save-entity.primed-tnt", false, listOf(
+                "Disable save primed tnt on chunk unloads.",
+                "Useful for redstone server, can prevent machine be exploded by TNT,",
+                "when player disconnected caused by Internet issue."
+            )
+        )
+        addDefault("feature.dont-save-entity.falling-block", false)
+        addDefault("feature.zero-tick-plants", false)
+        addDefault("feature.disable-spark", true)
+        addDefault(
+            "feature.flatten-triangular-distribution",
+            false,
+            listOf(
+                "Change all triangle distribution in Minecraft randomizers into uniform distribution",
+                "With that edge cases are more likely to happen"
+            )
+        )
+        addDefault(
+            "feature.secure-seed", false, listOf(
+                "Changes the seed from 64bit to 1024bit, this will strictly secure your seed,",
+                "making it almost impossible to crack.",
+                "Warning: You must delete existing maps to switch the state of the secure seed,",
+                "and do not modify it during hot loading, otherwise the server will crash and",
+                "cannot continue to load maps."
+            )
+        )
+
+        addDefault(
+            "optimize.minecart.enabled", true,
+            listOf(
+                "Enable this feature to handle large amount of stacked Minecart better.",
+                "By skipping tick collisions to reduce expense getting entities list",
+                "and bukkit event calls, useful for the anarchy server."
+            )
+        )
+        addDefault("optimize.minecart.skipTickCount", 30)
+
+        addDefault(
+            "optimize.mob-re-pathfinding",
+            true,
+            "If true, disables the frequent pathfinds done while already following a path"
+        )
+        addDefault(
+            "optimize.zombie-search-and-destroy-turtle-egg.enabled",
+            false,
+            "If true, optimizes the expensive searching done to find a turtle egg to crush, for zombies/husks, by default fully disabling it"
+        )
+        addDefault(
+            "optimize.zombie-search-and-destroy-turtle-egg.percent-chance",
+            40,
+            "Percent chance to run for task: zombie seeking turtle eggs to destroy"
+        )
+
+        addDefault("optimize.noise-generation", true)
+
+        configuration.options().copyDefaults(true)
+        configuration.save(configFile)
+    }
+
+    private fun loadConfigValue() {
+        Fix.incorrectBounceLogic = getBoolean("fix.incorrect-bounce-logic")
+        Fix.explosionBreaksItemFrameInWater = getBoolean("fix.explosion-breaks-item-frame-in-water")
+
+        Fix.anvilDrop = getBoolean("fix.anvil-drop.enabled")
+        Fix.anvilDropLogger = getBoolean("fix.anvil-drop.debug")
+        Fix.network = getBoolean("fix.network")
+
+        Feature.zeroTickPlants = getBoolean("feature.zero-tick-plants")
+        Feature.disableSpark = getBoolean("feature.disable-spark")
+        Feature.flattenTriangularDistribution = getBoolean("feature.flatten-triangular-distribution")
+        Feature.DSE.primedTNT = getBoolean("feature.dont-save-entity.primed-tnt")
+        Feature.DSE.fallingBlock = getBoolean("feature.dont-save-entity.falling-block")
+
+        getBoolean("feature.secure-seed") {
+            if (isSecureSeed == null) {
+                Feature.secureSeed = it
+                isSecureSeed = it
+                if (it) logger.warn("SecureSeed has been enabled, and this value cannot be modified before deleting the map.")
+            } else if (isSecureSeed != it) {
+                logger.error("Forbidden to modify the parameter \"feature.secure-seed\" during runtime")
+            }
+        }
+
+        Optimize.Minecart.enabled = getBoolean("optimize.minecart.enabled")
+        Optimize.Minecart.skipTickCount = getInt("optimize.minecart.skipTickCount")
+
+        Optimize.mobRePathfinding = getBoolean("optimize.mob-re-pathfinding")
+        Optimize.TurtleEggSearch.enabled =
+            getBoolean("optimize.zombie-search-and-destroy-turtle-egg.enabled")
+        Optimize.TurtleEggSearch.percentChance =
+            getInt("optimize.zombie-search-and-destroy-turtle-egg.percent-chance")
+
+        Optimize.noiseGeneration = getBoolean("optimize.noise-generation")
+    }
+
+    private fun addDefault(path: String, value: Any) {
+        configuration.addDefault(path, value)
+    }
+
+    private fun addDefault(path: String, value: Any, comment: String) {
+        configuration.addDefault(path, value)
+        configuration.setComments(path, listOf(comment))
+    }
+
+    private fun addComment(path: String, comment: String) {
+        configuration.setComments(path, listOf(comment))
+    }
+
+    private fun addComment(path: String, comment: List<String>) {
+        configuration.setComments(path, comment)
+    }
+
+    private fun addDefault(path: String, value: Any, comment: List<String>) {
+        configuration.addDefault(path, value)
+        configuration.setComments(path, comment)
+    }
+
+    private fun getBoolean(path: String): Boolean {
+        return configuration.getBoolean(path)
+    }
+
+    private fun getBoolean(path: String, function: (it: Boolean) -> Unit) {
+        function(getBoolean(path))
+    }
+
+    private fun getDouble(path: String): Double {
+        return configuration.getDouble(path)
+    }
+
+    private fun getDouble(path: String, function: (it: Double) -> Unit) {
+        function(getDouble(path))
+    }
+
+    private fun getInt(path: String): Int {
+        return configuration.getInt(path)
+    }
+
+    private fun getInt(path: String, function: (it: Int) -> Unit) {
+        function(getInt(path))
+    }
+
+    private fun getString(path: String): String? {
+        return configuration.getString(path)
+    }
+
+    private fun getString(path: String, function: (it: String?) -> Unit) {
+        function(getString(path))
+    }
+
+    object Fix {
+        @JvmField
+        var network = false
+
+        @JvmField
+        var anvilDrop = true
+
+        @JvmField
+        var anvilDropLogger = false
+
+        @JvmField
+        var explosionBreaksItemFrameInWater = false
+
+        @JvmField
+        var incorrectBounceLogic = false
+    }
+
+    object Feature {
+        @JvmField
+        var flattenTriangularDistribution = false
+
+        @JvmField
+        var zeroTickPlants = false
+
+        @JvmField
+        var secureSeed = false
+
+        @JvmField
+        var disableSpark = true
+
+        object DSE {
+            @JvmField
+            var primedTNT = false
+
+            @JvmField
+            var fallingBlock = false
+        }
+    }
+
+    object Optimize {
+        @JvmField
+        var noiseGeneration = true
+
+        object Minecart {
+            @JvmField
+            var enabled = true
+
+            @JvmField
+            var skipTickCount = 30
+        }
+
+        @JvmField
+        var mobRePathfinding = true
+
+        object TurtleEggSearch {
+            @JvmField
+            var enabled = false
+
+            @JvmField
+            var percentChance = 40
+        }
+    }
+}
\ No newline at end of file
