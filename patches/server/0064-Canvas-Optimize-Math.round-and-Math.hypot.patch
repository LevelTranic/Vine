From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Wed, 24 Jul 2024 22:48:41 +0800
Subject: [PATCH] Canvas: Optimize Math.round and Math.hypot

You can find the original code on https://github.com/CraftCanvasMC/Canvas

diff --git a/src/main/java/carpetfixes/helpers/FastMath.java b/src/main/java/carpetfixes/helpers/FastMath.java
new file mode 100644
index 0000000000000000000000000000000000000000..8084a8a2ee5127dbdd2eac03ca5127cf85ee2719
--- /dev/null
+++ b/src/main/java/carpetfixes/helpers/FastMath.java
@@ -0,0 +1,59 @@
+package carpetfixes.helpers;
+
+public class FastMath {
+
+    private static final double HYPOT_MAX_MAG = 2^511;
+    private static final double HYPOT_FACTOR = 2^750;
+
+    /**
+      * @author FX - PR0CESS
+      * ~1.25x faster than {@link Math#round(float)}
+      */
+    public static int round(float a) {
+        if (true) return a > 0F ? (int)(a + .5F) : (int)(a - .5F);
+        return Math.round(a);
+    }
+
+    /**
+      * @author FX - PR0CESS
+      * ~1.28x faster than {@link Math#round(double)}
+      */
+    public static long round(double a) {
+        if (true) return a > 0D ? (long)(a + .5D) : (long)(a - .5D);
+        return Math.round(a);
+    }
+
+    /**
+      * @author FX - PR0CESS
+      * Hypot implementation from the jafama library. Not 100% accurate! (3E-14%, 15 is perfectly accurate)
+      * ~1.6x faster than {@link Math#hypot(double,double)}
+      */
+    public static double hypot(double x, double y) {
+        x = Math.abs(x);
+        y = Math.abs(y);
+        if (y < x) { // Ensuring x <= y
+            final double a = x;
+            x = y;
+            y = a;
+        } else if (!(y >= x)) { // Testing if we have some NaN
+            return x == Double.POSITIVE_INFINITY ? Double.POSITIVE_INFINITY : Double.NaN;
+        }
+        if (y-x == y) { // x too small to subtract from y
+            return y;
+        } else {
+            double factor;
+            if (y > HYPOT_MAX_MAG) { // y is too large: scaling down
+                x *= (1/HYPOT_FACTOR);
+                y *= (1/HYPOT_FACTOR);
+                factor = HYPOT_FACTOR;
+            } else if (x < (1/HYPOT_MAX_MAG)) { // x is too small: scaling up
+                x *= HYPOT_FACTOR;
+                y *= HYPOT_FACTOR;
+                factor = (1/HYPOT_FACTOR);
+            } else {
+                factor = 1.0;
+            }
+            return factor * Math.sqrt(x*x+y*y);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index 308f67d0616e2d6bb135258f1fda53ccdee01430..b161dd2ecc8a2cdba6a07f84b681b225a16e8761 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -81,6 +81,6 @@ public class RAMDetails extends JList<String> {
     }
 
     private static String format(double tps) {
-        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( carpetfixes.helpers.FastMath.round( tps * 100.0 ) / 100.0, 20.0 ); // Mirai
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
index c3e54da4ab6440811aab2f9dd1e218802ac13285..2372727c193f5ed44a9975f0d40dd7954b69908d 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
@@ -18,7 +18,7 @@ import java.util.LinkedList;
 import java.util.concurrent.TimeUnit;
 
 public class RAMGraph extends JComponent {
-    public static final LinkedList<GraphData> DATA = new LinkedList<GraphData>() {
+    public static final LinkedList<GraphData> DATA = new LinkedList<>() {
         @Override
         public boolean add(GraphData data) {
             if (size() >= 348) {
@@ -128,7 +128,7 @@ public class RAMGraph extends JComponent {
             graphics.setColor(data.getLineColor());
             graphics.fillOval(m.x - 2, 100 - used - 2, 5, 5);
             setToolTipText(String.format("<html><body>Used: %s mb (%s%%)<br/>%s</body></html>",
-                Math.round(data.getUsedMem() / 1024F / 1024F),
+                    carpetfixes.helpers.FastMath.round(data.getUsedMem() / 1024F / 1024F), // Mirai
                 used, getTime(m.x)));
         }
     }
diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/TPSCollector.java b/src/main/java/gg/pufferfish/pufferfish/flare/collectors/TPSCollector.java
index 40447d00aefb5ffedb8a2ee87155a04088f0649f..31cc0a29e89e79f616b3ee329a5528961edaa2de 100644
--- a/src/main/java/gg/pufferfish/pufferfish/flare/collectors/TPSCollector.java
+++ b/src/main/java/gg/pufferfish/pufferfish/flare/collectors/TPSCollector.java
@@ -25,7 +25,7 @@ public class TPSCollector extends LiveCollector {
         long[] times = MinecraftServer.getServer().tickTimes5s.getTimes();
         double mspt = ((double) Arrays.stream(times).sum() / (double) times.length) * 1.0E-6D;
 
-        this.report(TPS, Math.min(20D, Math.round(Bukkit.getServer().getTPS()[0] * 100d) / 100d));
-        this.report(MSPT, (double) Math.round(mspt * 100d) / 100d);
+        this.report(TPS, Math.min(20D, carpetfixes.helpers.FastMath.round(Bukkit.getServer().getTPS()[0] * 100d) / 100d));
+        this.report(MSPT, (double) carpetfixes.helpers.FastMath.round(mspt * 100d) / 100d);
     }
 }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
index 56524cbe4303901007e1e7fb3703a19efbf79ae7..4c1e61e1ded787bbe61e7574b79df3ead2ca0093 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
@@ -89,12 +89,12 @@ public final class FixLightCommand implements PaperSubcommand {
                 ++relitChunks[0];
                 sender.getBukkitEntity().sendMessage(text().color(DARK_AQUA).append(
                     text("Relit chunk ", BLUE), text(chunkPos.toString()),
-                    text(", progress: ", BLUE), text((int) (Math.round(100.0 * (double) (relitChunks[0]) / (double) pending[0])) + "%")
+                    text(", progress: ", BLUE), text((int) (carpetfixes.helpers.FastMath.round(100.0 * (double) (relitChunks[0]) / (double) pending[0])) + "%")
                 ));
             },
             (final int totalRelit) -> {
                 final long end = System.nanoTime();
-                final long diff = Math.round(1.0e-6 * (end - start));
+                final long diff = carpetfixes.helpers.FastMath.round(1.0e-6 * (end - start));
                 sender.getBukkitEntity().sendMessage(text().color(DARK_AQUA).append(
                     text("Relit ", BLUE), text(totalRelit),
                     text(" chunks. Took ", BLUE), text(diff + "ms")
diff --git a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
index 0a1aa5488683143b37fe1010dcf4e8f18b8bef27..a9e7e15bd2f9b805c5de5a5d5d4d912c26d9a89e 100644
--- a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
@@ -48,7 +48,7 @@ public class TimeArgument implements ArgumentType<Integer> {
         if (i == 0) {
             throw ERROR_INVALID_UNIT.createWithContext(stringReader);
         } else {
-            int j = Math.round(f * (float)i);
+            int j = carpetfixes.helpers.FastMath.round(f * (float)i); // Canvas
             if (j < this.minimum) {
                 throw ERROR_TICK_COUNT_TOO_LOW.createWithContext(stringReader, j, this.minimum);
             } else {
diff --git a/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java b/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
index 23fe7c4c1844d321efed6b7b886c422761ad6594..c968a07ef296f8a4d3d97085727ed71581bb213e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
+++ b/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
@@ -9,7 +9,7 @@ public class VecDeltaCodec {
 
     @VisibleForTesting
     static long encode(double value) {
-        return Math.round(value * 4096.0); // Paper - Fix MC-4; diff on change
+        return carpetfixes.helpers.FastMath.round(value * 4096.0); // Paper - Fix MC-4; diff on change // Canvas
     }
 
     @VisibleForTesting
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index bdd6938b3102e7201cc6700ce1213209e62c294d..96fe7169cf8a79268ca2d3c1eb2b98b6dbcaae5c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1516,7 +1516,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     }
 
                     double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
-                    long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+                    long extraSleep = (long)carpetfixes.helpers.FastMath.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
 
                     lastMidTickExecute = currTime + extraSleep;
                     return;
diff --git a/src/main/java/net/minecraft/server/gui/StatsComponent.java b/src/main/java/net/minecraft/server/gui/StatsComponent.java
index cd0a8a6a1be75cab8bbb8ee3ac17bb732b9e7108..b2e616da719a92a16996a397d3d8a98acaef997d 100644
--- a/src/main/java/net/minecraft/server/gui/StatsComponent.java
+++ b/src/main/java/net/minecraft/server/gui/StatsComponent.java
@@ -78,7 +78,7 @@ public class StatsComponent extends JComponent {
 
     // Paper start - Improve ServerGUI
     private static String format(double tps) {
-        return (( tps > 21.0 ) ? "*" : "") + Math.min(Math.round(tps * 100.0) / 100.0, 20.0); // only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        return (( tps > 21.0 ) ? "*" : "") + Math.min(carpetfixes.helpers.FastMath.round(tps * 100.0) / 100.0, 20.0); // only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Mirai
     }
     // Paper end - Improve ServerGUI
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index d04c7cee101e2591d912fc015e30c61913381b8b..37eeefd690e34b53ee0fe27826bc0bd7a886780d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1948,29 +1948,29 @@ public class ServerPlayer extends Player {
             int i;
 
             if (this.isSwimming()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
                 if (i > 0) {
                     this.awardStat(Stats.SWIM_ONE_CM, i);
                     this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.SWIM); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.isEyeInFluid(FluidTags.WATER)) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
                 if (i > 0) {
                     this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, i);
                     this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_UNDERWATER); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.isInWater()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
                 if (i > 0) {
                     this.awardStat(Stats.WALK_ON_WATER_ONE_CM, i);
                     this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_ON_WATER); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.onClimbable()) {
                 if (deltaY > 0.0D) {
-                    this.awardStat(Stats.CLIMB_ONE_CM, (int) Math.round(deltaY * 100.0D));
+                    this.awardStat(Stats.CLIMB_ONE_CM, (int) carpetfixes.helpers.FastMath.round(deltaY * 100.0D));
                 }
             } else if (this.onGround()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
                 if (i > 0) {
                     if (this.isSprinting()) {
                         this.awardStat(Stats.SPRINT_ONE_CM, i);
@@ -1984,10 +1984,10 @@ public class ServerPlayer extends Player {
                     }
                 }
             } else if (this.isFallFlying()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
                 this.awardStat(Stats.AVIATE_ONE_CM, i);
             } else {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
                 if (i > 25) {
                     this.awardStat(Stats.FLY_ONE_CM, i);
                 }
@@ -1998,7 +1998,7 @@ public class ServerPlayer extends Player {
 
     private void checkRidingStatistics(double deltaX, double deltaY, double deltaZ) {
         if (this.isPassenger() && !ServerPlayer.didNotMove(deltaX, deltaY, deltaZ)) {
-            int i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+            int i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
             Entity entity = this.getVehicle();
 
             if (entity instanceof AbstractMinecart) {
diff --git a/src/main/java/net/minecraft/util/Mth.java b/src/main/java/net/minecraft/util/Mth.java
index 9b5aca3bb44ae0aedb0df38dfecbd7a4e3b7a65a..6994aabad832118c4f8ff0f95a25286cf28a27f1 100644
--- a/src/main/java/net/minecraft/util/Mth.java
+++ b/src/main/java/net/minecraft/util/Mth.java
@@ -29,7 +29,7 @@ public class Mth {
     public static final Vector3f Y_AXIS = new Vector3f(0.0F, 1.0F, 0.0F);
     public static final Vector3f X_AXIS = new Vector3f(1.0F, 0.0F, 0.0F);
     public static final Vector3f Z_AXIS = new Vector3f(0.0F, 0.0F, 1.0F);
-    private static final float[] SIN = Util.make(new float[65536], sineTable -> {
+    public static final float[] SIN = Util.make(new float[65536], sineTable -> { // Canvas - private -> public
         for (int ix = 0; ix < sineTable.length; ix++) {
             sineTable[ix] = (float)Math.sin((double)ix * Math.PI * 2.0 / 65536.0);
         }
@@ -627,6 +627,7 @@ public class Mth {
     }
 
     public static double length(double a, double b) {
+        if (true) return carpetfixes.helpers.FastMath.hypot(a, b); // Mirai
         return Math.sqrt(lengthSquared(a, b));
     }
 
diff --git a/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java b/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java
index 52151082b031f250b13bfaa35417e1d934a54f60..5d31a8f143ba13624e81013e15e07b16e0aa1840 100644
--- a/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java
+++ b/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java
@@ -37,7 +37,7 @@ public class SegmentedAnglePrecision {
     }
 
     public int fromDegreesWithTurns(float degrees) {
-        return Math.round(degrees * this.degreeToAngle);
+        return carpetfixes.helpers.FastMath.round(degrees * this.degreeToAngle);
     }
 
     public int fromDegrees(float degrees) {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 8176d9e8a4ef138a2ad5b82d090a5a0c3ae26367..5e14d1521b779cda13bf6b35422936f390caefff 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1665,7 +1665,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             if (this instanceof ServerPlayer) {
                 CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, source, f1, amount, flag);
                 if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                    ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f2 * 10.0F));
+                    ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Canvas
                 }
             }
 
@@ -2281,9 +2281,9 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
                 if (f3 > 0.0F && f3 < 3.4028235E37F) {
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F));
                     } else if (source.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer) source.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) source.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Canvas
                     }
                 }
             }
@@ -2395,9 +2395,9 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 float f3 = (float) -event.getDamage(DamageModifier.RESISTANCE);
                 if (f3 > 0.0F && f3 < 3.4028235E37F) {
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Canvas
                     } else if (damagesource.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Canvas
                     }
                 }
             }
@@ -2429,7 +2429,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             float f2 = absorptionModifier;
 
             if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof net.minecraft.world.entity.player.Player) {
-                ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+                ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Canvas
             }
             if (f2 > 0.0F && f2 < 3.4028235E37F) {
                 Entity entity = damagesource.getEntity();
@@ -2437,7 +2437,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 if (entity instanceof ServerPlayer) {
                     ServerPlayer entityplayer = (ServerPlayer) entity;
 
-                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
+                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Canvas
                 }
             }
 
@@ -2446,7 +2446,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                     // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
                     ((net.minecraft.world.entity.player.Player) this).causeFoodExhaustion(damagesource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
                     if (f < 3.4028235E37F) {
-                        ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                        ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_TAKEN, carpetfixes.helpers.FastMath.round(f * 10.0F)); // Canvas
                     }
                 }
                 // CraftBukkit end
@@ -2466,7 +2466,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                         CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, damagesource, originalDamage, f, true); // Paper - fix taken/dealt param order
                         f2 = (float) -event.getDamage(DamageModifier.BLOCKING);
                         if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, carpetfixes.helpers.FastMath.round(originalDamage * 10.0F)); // Canvas
                         }
                     }
 
@@ -3254,13 +3254,13 @@ public abstract class LivingEntity extends Entity implements Attackable {
         //this.level().getProfiler().push("rangeChecks"); // Purpur
 
         // Paper start - stop large pitch and yaw changes from crashing the server
-        this.yRotO += Math.round((this.getYRot() - this.yRotO) / 360.0F) * 360.0F;
+        this.yRotO += carpetfixes.helpers.FastMath.round((this.getYRot() - this.yRotO) / 360.0F) * 360.0F; // Canvas
 
-        this.yBodyRotO += Math.round((this.yBodyRot - this.yBodyRotO) / 360.0F) * 360.0F;
+        this.yBodyRotO += carpetfixes.helpers.FastMath.round((this.yBodyRot - this.yBodyRotO) / 360.0F) * 360.0F; // Canvas
 
-        this.xRotO += Math.round((this.getXRot() - this.xRotO) / 360.0F) * 360.0F;
+        this.xRotO += carpetfixes.helpers.FastMath.round((this.getXRot() - this.xRotO) / 360.0F) * 360.0F; // Canvas
 
-        this.yHeadRotO += Math.round((this.yHeadRot - this.yHeadRotO) / 360.0F) * 360.0F;
+        this.yHeadRotO += carpetfixes.helpers.FastMath.round((this.yHeadRot - this.yHeadRotO) / 360.0F) * 360.0F; // Canvas
         // Paper end
 
         //this.level().getProfiler().pop(); // Purpur
diff --git a/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java b/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java
index 3b58c34a380d336cbbd5870c362f27fb169459b6..1f929ae297741ca7b31627f3b96c46f3e649ba9e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java
+++ b/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java
@@ -32,7 +32,7 @@ public class LongJump extends Behavior<Breeze> {
     private static final int REQUIRED_AIR_BLOCKS_ABOVE = 4;
     private static final int JUMP_COOLDOWN_TICKS = 10;
     private static final int JUMP_COOLDOWN_WHEN_HURT_TICKS = 2;
-    private static final int INHALING_DURATION_TICKS = Math.round(10.0F);
+    private static final int INHALING_DURATION_TICKS = carpetfixes.helpers.FastMath.round(10.0F);
     private static final float MAX_JUMP_VELOCITY = 1.4F;
     private static final ObjectArrayList<Integer> ALLOWED_ANGLES = new ObjectArrayList<>(Lists.newArrayList(40, 55, 60, 75, 80));
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java b/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java
index 2ace4321a962780f2cb7d1f18a1ce1c97f839cc6..6f2d752504ec799235c2c6225e45a99ecde10b27 100644
--- a/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java
+++ b/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java
@@ -21,9 +21,9 @@ public class Shoot extends Behavior<Breeze> {
     private static final int UNCERTAINTY_BASE = 5;
     private static final int UNCERTAINTY_MULTIPLIER = 4;
     private static final float PROJECTILE_MOVEMENT_SCALE = 0.7F;
-    private static final int SHOOT_INITIAL_DELAY_TICKS = Math.round(15.0F);
-    private static final int SHOOT_RECOVER_DELAY_TICKS = Math.round(4.0F);
-    private static final int SHOOT_COOLDOWN_TICKS = Math.round(10.0F);
+    private static final int SHOOT_INITIAL_DELAY_TICKS = carpetfixes.helpers.FastMath.round(15.0F);
+    private static final int SHOOT_RECOVER_DELAY_TICKS = carpetfixes.helpers.FastMath.round(4.0F);
+    private static final int SHOOT_COOLDOWN_TICKS = carpetfixes.helpers.FastMath.round(10.0F);
 
     @VisibleForTesting
     public Shoot() {
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index a2cb97253c0df83b5fe73eafdfe31fc1996981e6..5219167d81e3fe8cc218f9221419f90f8c17cbb5 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1126,7 +1126,7 @@ public abstract class Player extends LivingEntity {
             float f2 = f1 - f;
 
             if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+                this.awardStat(Stats.DAMAGE_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Mirai
             }
 
             if (f != 0.0F) {
@@ -1134,7 +1134,7 @@ public abstract class Player extends LivingEntity {
                 this.getCombatTracker().recordDamage(damagesource, f);
                 this.setHealth(this.getHealth() - f);
                 if (f < 3.4028235E37F) {
-                    this.awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                    this.awardStat(Stats.DAMAGE_TAKEN, carpetfixes.helpers.FastMath.round(f * 10.0F)); // Mirai
                 }
 
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
@@ -1477,7 +1477,7 @@ public abstract class Player extends LivingEntity {
                             if (target instanceof LivingEntity) {
                                 float f5 = f3 - ((LivingEntity) target).getHealth();
 
-                                this.awardStat(Stats.DAMAGE_DEALT, Math.round(f5 * 10.0F));
+                                this.awardStat(Stats.DAMAGE_DEALT, carpetfixes.helpers.FastMath.round(f5 * 10.0F));
                                 if (j > 0) {
                                     // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
                                     EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), target.getBukkitEntity(), j * 4);
@@ -1758,7 +1758,7 @@ public abstract class Player extends LivingEntity {
             return false;
         } else {
             if (fallDistance >= 2.0F) {
-                this.awardStat(Stats.FALL_ONE_CM, (int) Math.round((double) fallDistance * 100.0D));
+                this.awardStat(Stats.FALL_ONE_CM, (int) carpetfixes.helpers.FastMath.round((double) fallDistance * 100.0D));
             }
 
             if (this.ignoreFallDamageFromCurrentImpulse && this.currentImpulseImpactPos != null) {
@@ -1986,7 +1986,7 @@ public abstract class Player extends LivingEntity {
             // Purpur start
             int toDrop;
             try {
-                toDrop = Math.round(((Number) scriptEngine.eval("let expLevel = " + experienceLevel + "; " +
+                toDrop = carpetfixes.helpers.FastMath.round(((Number) scriptEngine.eval("let expLevel = " + experienceLevel + "; " +
                         "let expTotal = " + totalExperience + "; " +
                         "let exp = " + experienceProgress + "; " +
                         level().purpurConfig.playerDeathExpDropEquation)).floatValue());
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index a69cd350b6c1e66fc0e81917e23bccc1bc0ab75d..0615c24cd9e3501d75421cbde4a4398d1932db7d 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -346,7 +346,7 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     protected static float lerpRotation(float prevRot, float newRot) {
-        prevRot += Math.round((newRot - prevRot) / 360.0F) * 360.0F; // Paper - stop large look changes from crashing the server
+        prevRot += carpetfixes.helpers.FastMath.round((newRot - prevRot) / 360.0F) * 360.0F; // Paper - stop large look changes from crashing the server // Mirai
 
         return Mth.lerp(0.2F, prevRot, newRot);
     }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 00d2819494d60b54aa268bbe2ccf57be605ceb30..e47b078024eb4b86fea9104bdb46200671d05dc6 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -159,7 +159,7 @@ public class Item implements FeatureElement, ItemLike {
     }
 
     public int getBarWidth(ItemStack stack) {
-        return Mth.clamp(Math.round(13.0F - (float)stack.getDamageValue() * 13.0F / (float)stack.getMaxDamage()), 0, 13);
+        return Mth.clamp(carpetfixes.helpers.FastMath.round(13.0F - (float)stack.getDamageValue() * 13.0F / (float)stack.getMaxDamage()), 0, 13);
     }
 
     public int getBarColor(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index 6d0363cec691996be416ab22ef9d825196399158..ee052f0868842b51919ef2aa048bcc98038056c2 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -327,7 +327,7 @@ public class EnchantmentHelper {
         } else {
             level += 1 + random.nextInt(i / 4 + 1) + random.nextInt(i / 4 + 1);
             float f = (random.nextFloat() + random.nextFloat() - 1.0F) * 0.15F;
-            level = Mth.clamp(Math.round((float)level + (float)level * f), 1, Integer.MAX_VALUE);
+            level = Mth.clamp(carpetfixes.helpers.FastMath.round((float)level + (float)level * f), 1, Integer.MAX_VALUE);
             List<EnchantmentInstance> list2 = getAvailableEnchantmentResults(enabledFeatures, level, stack, treasureAllowed);
             if (!list2.isEmpty()) {
                 WeightedRandom.getRandomItem(random, list2).ifPresent(list::add);
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index 26ec4838c476b8091f80aeac61db8041d5c89e88..b74042399b0c9d150f9e5d6178a2a850083e2e4d 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -69,7 +69,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
             float f1 = f < 3.1415927F ? 0.0F : 6.2831855F;
 
             f += (f1 - f) * 0.2F;
-            i = Math.round((float) i * Mth.cos(f));
+            i = carpetfixes.helpers.FastMath.round((float) i * Mth.cos(f)); // Mirai
         }
 
         i = Mth.clamp(i, 0, 15);
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
index d0733c56fe8202d646fd3863e6e48d7d9589f20d..872420100e4efb5a35ad921f75ca4ed63e17b641 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
@@ -248,8 +248,8 @@ public class ChunkGeneratorStructureState {
 
             for (int j1 = 0; j1 < j; ++j1) {
                 double d1 = (double) (4 * i + i * i1 * 6) + (randomsource.nextDouble() - 0.5D) * (double) i * 2.5D;
-                int k1 = (int) Math.round(Math.cos(d0) * d1);
-                int l1 = (int) Math.round(Math.sin(d0) * d1);
+                int k1 = (int) carpetfixes.helpers.FastMath.round(Math.cos(d0) * d1);  // Mirai
+                int l1 = (int) carpetfixes.helpers.FastMath.round(Math.sin(d0) * d1);  // Mirai
                 RandomSource randomsource1 = randomsource.fork();
 
                 list.add(CompletableFuture.supplyAsync(() -> {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
index 0c5ea791b548c52c7737cacd9dd4850236666b49..700887f773f358888605efa5dd1da4e87f96af5c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
@@ -322,7 +322,7 @@ public class SurfaceSystem {
     }
 
     protected BlockState getBand(int x, int y, int z) {
-        int i = (int)Math.round(this.clayBandsOffsetNoise.getValue((double)x, 0.0, (double)z) * 4.0);
+        int i = (int)carpetfixes.helpers.FastMath.round(this.clayBandsOffsetNoise.getValue((double)x, 0.0, (double)z) * 4.0); // Canvas
         return this.clayBands[(y + i + this.clayBands.length) % this.clayBands.length];
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
index 9cd3ed6c2673fabc5b5a700646e7c75c7e8d2a92..ac88a64c835a0553cccbd4f13fe60418bb68d057 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
@@ -46,6 +46,6 @@ public class ScatteredOreFeature extends Feature<OreConfiguration> {
     }
 
     private int getRandomPlacementInOneAxisRelativeToOrigin(RandomSource random, int spread) {
-        return Math.round((random.nextFloat() - random.nextFloat()) * (float)spread);
+        return carpetfixes.helpers.FastMath.round((random.nextFloat() - random.nextFloat()) * (float)spread); // Canvas
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
index 5500e7ada2dd783cc1317968a3e54696bdd73bf8..a610c1f6b9cb969645865c7bfd246bf9c9329c78 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -76,7 +76,7 @@ public class LootingEnchantFunction extends LootItemConditionalFunction {
 
             float f = (float) i * this.value.getFloat(context);
 
-            stack.grow(Math.round(f));
+            stack.grow(carpetfixes.helpers.FastMath.round(f));
             if (this.hasLimit()) {
                 stack.limitSize(this.limit);
             }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
index 2a7c75ea447b179ea1ab9db56e8a39d03faa0bce..53ca87c7659a4fff9e99d21217d1ad08c8765836 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
@@ -7,7 +7,7 @@ public interface NumberProvider extends LootContextUser {
     float getFloat(LootContext context);
 
     default int getInt(LootContext context) {
-        return Math.round(this.getFloat(context));
+        return carpetfixes.helpers.FastMath.round(this.getFloat(context)); // Mirai
     }
 
     LootNumberProviderType getType();
diff --git a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
index fbf1a559aefe444410b63a773374e011e4964e16..053dbcc5e83f9765b9c5f8f4606619198f08e85a 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
@@ -97,8 +97,8 @@ public final class Shapes {
                     final int sizeZ = 1 << bitsZ;
                     final BitSetDiscreteVoxelShape shape = BitSetDiscreteVoxelShape.withFilledBounds(
                             sizeX, sizeY, sizeZ,
-                            (int)Math.round(minX * (double)sizeX), (int)Math.round(minY * (double)sizeY), (int)Math.round(minZ * (double)sizeZ),
-                            (int)Math.round(maxX * (double)sizeX), (int)Math.round(maxY * (double)sizeY), (int)Math.round(maxZ * (double)sizeZ)
+                            (int)carpetfixes.helpers.FastMath.round(minX * (double)sizeX), (int)carpetfixes.helpers.FastMath.round(minY * (double)sizeY), (int)carpetfixes.helpers.FastMath.round(minZ * (double)sizeZ),
+                            (int)carpetfixes.helpers.FastMath.round(maxX * (double)sizeX), (int)carpetfixes.helpers.FastMath.round(maxY * (double)sizeY), (int)carpetfixes.helpers.FastMath.round(maxZ * (double)sizeZ)
                     );
                     return new ArrayVoxelShape(
                             shape,
@@ -132,8 +132,8 @@ public final class Shapes {
                 int j = 1 << i;
                 double d = min * (double)j;
                 double e = max * (double)j;
-                boolean bl = Math.abs(d - (double)Math.round(d)) < 1.0E-7 * (double)j;
-                boolean bl2 = Math.abs(e - (double)Math.round(e)) < 1.0E-7 * (double)j;
+                boolean bl = Math.abs(d - (double)carpetfixes.helpers.FastMath.round(d)) < 1.0E-7 * (double)j; // Canvas
+                boolean bl2 = Math.abs(e - (double)carpetfixes.helpers.FastMath.round(e)) < 1.0E-7 * (double)j; // Canvas
                 if (bl && bl2) {
                     return i;
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 494920321af0098e390d6b2669403acc97dab984..7c61fe9be1602c9363008e0be2d6e93edf3903b1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1926,7 +1926,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start
     @Override
     public int calculateTotalExperiencePoints() {
-        return calculateTotalExperiencePoints(this.getLevel()) + Math.round(this.getExperiencePointsNeededForNextLevel() * getExp());
+        return calculateTotalExperiencePoints(this.getLevel()) + carpetfixes.helpers.FastMath.round(this.getExperiencePointsNeededForNextLevel() * getExp());
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index f144a08e88f8268b84eb188a36bf470457f59958..7baf5de276bcc276b72b66d6b1549b55111398a3 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,7 +1,5 @@
 package org.spigotmc;
 
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
@@ -62,7 +60,7 @@ public class TicksPerSecondCommand extends Command
     {
         // Paper
         net.kyori.adventure.text.format.TextColor color = ( ( tps > 18.0 ) ? net.kyori.adventure.text.format.NamedTextColor.GREEN : ( tps > 16.0 ) ? net.kyori.adventure.text.format.NamedTextColor.YELLOW : net.kyori.adventure.text.format.NamedTextColor.RED );
-        String amount = Math.min(Math.round(tps * 100.0) / 100.0, 20.0) + (tps > 21.0  ? "*" : ""); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        String amount = Math.min(carpetfixes.helpers.FastMath.round(tps * 100.0) / 100.0, 20.0) + (tps > 21.0  ? "*" : ""); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Mirai
         return net.kyori.adventure.text.Component.text(amount, color);
         // Paper end
     }
