From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Thu, 15 Aug 2024 21:42:18 +0800
Subject: [PATCH] Try Virtual threads


diff --git a/src/main/java/gg/pufferfish/pufferfish/flare/ProfilingManager.java b/src/main/java/gg/pufferfish/pufferfish/flare/ProfilingManager.java
index 57cf697b0916a3b0ac0232422a5a4ba423427dc3..fe7f87fefcc99867c24f59dd66cb2971e7a414dd 100644
--- a/src/main/java/gg/pufferfish/pufferfish/flare/ProfilingManager.java
+++ b/src/main/java/gg/pufferfish/pufferfish/flare/ProfilingManager.java
@@ -34,7 +34,7 @@ public class ProfilingManager {
 
     private static Flare currentFlare;
     private static ScheduledFuture<?> currentTask = null;
-    private static ScheduledExecutorService ses = new ScheduledThreadPoolExecutor(1);
+    private static final ScheduledExecutorService ses = new ScheduledThreadPoolExecutor(1, one.tranic.vine.util.AnyThread.getFactory());
 
     public static synchronized boolean isProfiling() {
         return currentFlare != null && currentFlare.isRunning();
diff --git a/src/main/java/gg/pufferfish/pufferfish/util/AsyncExecutor.java b/src/main/java/gg/pufferfish/pufferfish/util/AsyncExecutor.java
index 8e5323d5d9af25c8a85c4b34a6be76cfc54384cf..84e7a1527b55e8c1d4fa10bfc295cb789e64afe2 100644
--- a/src/main/java/gg/pufferfish/pufferfish/util/AsyncExecutor.java
+++ b/src/main/java/gg/pufferfish/pufferfish/util/AsyncExecutor.java
@@ -17,7 +17,7 @@ public class AsyncExecutor implements Runnable {
 	private volatile boolean killswitch = false;
 	
 	public AsyncExecutor(String threadName) {
-		this.thread = new Thread(this, threadName);
+		this.thread = one.tranic.vine.util.AnyThread.getThread(this, threadName);
 	}
 	
 	public void start() {
diff --git a/src/main/java/io/papermc/paper/pluginremap/PluginRemapper.java b/src/main/java/io/papermc/paper/pluginremap/PluginRemapper.java
index 265c636abfd63f9ba0b0f0198867a10401c14da1..4a0afb7d428e0d6f990efd15ee9ae434b4118be7 100644
--- a/src/main/java/io/papermc/paper/pluginremap/PluginRemapper.java
+++ b/src/main/java/io/papermc/paper/pluginremap/PluginRemapper.java
@@ -429,6 +429,7 @@ public final class PluginRemapper {
             TimeUnit.SECONDS,
             ScalingThreadPool.createUnboundedQueue(),
             new ThreadFactoryBuilder()
+                .setThreadFactory(one.tranic.vine.util.AnyThread.getFactory())
                 .setNameFormat("Paper Plugin Remapper Thread - %1$d")
                 .setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(LOGGER))
                 .build(),
diff --git a/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaAsyncScheduler.java b/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaAsyncScheduler.java
index 374abffb9f1ce1a308822aed13038e77fe9ca08b..31d116e17795c91a4d62fc046fde58a5107519da 100644
--- a/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaAsyncScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/scheduler/FoliaAsyncScheduler.java
@@ -31,12 +31,11 @@ public final class FoliaAsyncScheduler implements AsyncScheduler {
 
             @Override
             public Thread newThread(final Runnable run) {
-                final Thread ret = new Thread(run);
-
+                final Thread ret = one.tranic.vine.util.AnyThread.getThread(run);
                 ret.setName("Folia Async Scheduler Thread #" + this.idGenerator.getAndIncrement());
                 ret.setPriority(Thread.NORM_PRIORITY - 1);
                 ret.setUncaughtExceptionHandler((final Thread thread, final Throwable thr) -> {
-                    LOGGER.error("Uncaught exception in thread: " + thread.getName(), thr);
+                    LOGGER.error("Uncaught exception in thread: {}", thread.getName(), thr);
                 });
 
                 return ret;
@@ -47,8 +46,7 @@ public final class FoliaAsyncScheduler implements AsyncScheduler {
     private final ScheduledExecutorService timerThread = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
         @Override
         public Thread newThread(final Runnable run) {
-            final Thread ret = new Thread(run);
-
+            final Thread ret = one.tranic.vine.util.AnyThread.getThread(run);
             ret.setName("Folia Async Scheduler Thread Timer");
             ret.setPriority(Thread.NORM_PRIORITY + 1);
             ret.setUncaughtExceptionHandler((final Thread thread, final Throwable thr) -> {
diff --git a/src/main/java/io/papermc/paper/util/MCUtil.java b/src/main/java/io/papermc/paper/util/MCUtil.java
index 1d6b3fe2ce240af4ede61588795456b046eee6c9..0e1dedb9baf70bd788a665e3cd7e53aa5f55def3 100644
--- a/src/main/java/io/papermc/paper/util/MCUtil.java
+++ b/src/main/java/io/papermc/paper/util/MCUtil.java
@@ -67,6 +67,7 @@ public final class MCUtil {
         new ThreadFactoryBuilder()
             .setNameFormat("Paper Async Task Handler Thread - %1$d")
             .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(MinecraftServer.LOGGER))
+            .setThreadFactory(one.tranic.vine.util.AnyThread.getFactory())
             .build()
     );
     public static final ThreadPoolExecutor cleanerExecutor = new ThreadPoolExecutor(
@@ -75,6 +76,7 @@ public final class MCUtil {
         new ThreadFactoryBuilder()
             .setNameFormat("Paper Object Cleaner")
             .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(MinecraftServer.LOGGER))
+            .setThreadFactory(one.tranic.vine.util.AnyThread.getFactory())
             .build()
     );
 
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 0bd367235f80c1f0d319a6aa5130d82ad82d895c..74cbfd82951cc4e8e4289e86b1b880e4b0c93acd 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -100,10 +100,10 @@ public class Util {
 
         @Override
         public Thread newThread(Runnable run) {
-            Thread ret = new Thread(run);
+            Thread ret = one.tranic.vine.util.AnyThread.getThread(run);
             ret.setName("Profile Lookup Executor #" + this.count.getAndIncrement());
             ret.setUncaughtExceptionHandler((Thread thread, Throwable throwable) -> {
-                LOGGER.error("Uncaught exception in thread " + thread.getName(), throwable);
+                LOGGER.error("Uncaught exception in thread {}", thread.getName(), throwable);
             });
             return ret;
         }
@@ -255,7 +255,7 @@ public class Util {
     private static ExecutorService makeIoExecutor(String namePrefix, boolean daemon) {
         AtomicInteger atomicInteger = new AtomicInteger(1);
         return Executors.newCachedThreadPool(runnable -> {
-            Thread thread = new Thread(runnable);
+            Thread thread = one.tranic.vine.util.AnyThread.getThread(runnable);
             thread.setName(namePrefix + atomicInteger.getAndIncrement());
             thread.setDaemon(daemon);
             thread.setUncaughtExceptionHandler(Util::onThreadException);
@@ -752,6 +752,7 @@ public class Util {
                 }
             }
         };
+
         thread.setDaemon(true);
         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
         thread.start();
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 4288d131d24e0b71d8ae4af07f0a7f98d07e624d..db9fa67c9cc562a6436a311087dbf7e62c1b39ec 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -494,6 +494,7 @@ public class Commands {
         new java.util.concurrent.LinkedBlockingQueue<>(),
         new com.google.common.util.concurrent.ThreadFactoryBuilder()
             .setNameFormat("Paper Async Command Builder Thread Pool - %1$d")
+            .setThreadFactory(one.tranic.vine.util.AnyThread.getFactory())
             .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER))
             .build(),
         new java.util.concurrent.ThreadPoolExecutor.DiscardPolicy()
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 4dc0b2d15ff2c0a84df08186d2a8e29d30136dac..2806be6c1e6908f9dd23a160243d413d7a79dcd7 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -87,13 +87,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         marker.add(Connection.PACKET_MARKER);
     });
     public static final Supplier<NioEventLoopGroup> NETWORK_WORKER_GROUP = Suppliers.memoize(() -> {
-        return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
+        return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setThreadFactory(one.tranic.vine.util.AnyThread.getFactory()).setNameFormat("Netty Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
     });
     public static final Supplier<EpollEventLoopGroup> NETWORK_EPOLL_WORKER_GROUP = Suppliers.memoize(() -> {
-        return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
+        return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setThreadFactory(one.tranic.vine.util.AnyThread.getFactory()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
     });
     public static final Supplier<DefaultEventLoopGroup> LOCAL_WORKER_GROUP = Suppliers.memoize(() -> {
-        return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
+        return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setThreadFactory(one.tranic.vine.util.AnyThread.getFactory()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
     });
     private static final ProtocolInfo<ServerHandshakePacketListener> INITIAL_PROTOCOL = HandshakeProtocols.SERVERBOUND;
     private final PacketFlow receiving;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 52c62442e68634358ea4112fa1aacdab2cca97bb..9231375976f0cd21c5e8a808736cb0db09a648a6 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2995,7 +2995,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public final java.util.concurrent.ExecutorService chatExecutor = java.util.concurrent.Executors.newCachedThreadPool(
-            new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Chat Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER)).build()); // Paper
+            new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setThreadFactory(one.tranic.vine.util.AnyThread.getFactory()).setNameFormat("Async Chat Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.LOGGER)).build()); // Paper
 
     public final ChatDecorator improvedChatDecorator = new io.papermc.paper.adventure.ImprovedChatDecorator(this); // Paper - adventure
     public ChatDecorator getChatDecorator() {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 7105802aee38f8f0b896e97e59c566dbee8964d2..26450404dc8f1c06a19a925cedb3d53e435917d7 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -95,60 +95,60 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     @Override
     public boolean initServer() throws IOException {
-        Thread thread = new Thread("Server console handler") {
-            public void run() {
-                // CraftBukkit start
-                if (!org.bukkit.craftbukkit.Main.useConsole) {
-                    return;
-                }
-                // Paper start - Use TerminalConsoleAppender
-                if (DedicatedServer.this.gui == null || System.console() != null) // Purpur - has no GUI or has console (did not double-click)
-                new com.destroystokyo.paper.console.PaperConsole(DedicatedServer.this).start();
-                /*
-                jline.console.ConsoleReader bufferedreader = DedicatedServer.this.reader;
+        Runnable run = () -> {
+            // CraftBukkit start
+            if (!org.bukkit.craftbukkit.Main.useConsole) {
+                return;
+            }
+            // Paper start - Use TerminalConsoleAppender
+            if (DedicatedServer.this.gui == null || System.console() != null) // Purpur - has no GUI or has console (did not double-click)
+            new com.destroystokyo.paper.console.PaperConsole(DedicatedServer.this).start();
+            /*
+            jline.console.ConsoleReader bufferedreader = DedicatedServer.this.reader;
 
-                // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
-                try {
-                    System.in.available();
-                } catch (IOException ex) {
-                    return;
-                }
-                // CraftBukkit end
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+                System.in.available();
+            } catch (IOException ex) {
+                return;
+            }
+            // CraftBukkit end
 
-                String s;
+            String s;
 
-                try {
-                    // CraftBukkit start - JLine disabling compatibility
-                    while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
-                        if (org.bukkit.craftbukkit.Main.useJline) {
-                            s = bufferedreader.readLine(">", null);
-                        } else {
-                            s = bufferedreader.readLine();
-                        }
+            try {
+                // CraftBukkit start - JLine disabling compatibility
+                while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                    if (org.bukkit.craftbukkit.Main.useJline) {
+                        s = bufferedreader.readLine(">", null);
+                    } else {
+                        s = bufferedreader.readLine();
+                    }
 
-                        // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
-                        if (s == null) {
-                            try {
-                                Thread.sleep(50L);
-                            } catch (InterruptedException ex) {
-                                Thread.currentThread().interrupt();
-                            }
-                            continue;
+                    // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                    if (s == null) {
+                        try {
+                            Thread.sleep(50L);
+                        } catch (InterruptedException ex) {
+                            Thread.currentThread().interrupt();
                         }
-                        if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
-                            DedicatedServer.this.issueCommand(s, DedicatedServer.this.getServerCommandListener());
-                        }
-                        // CraftBukkit end
+                        continue;
+                    }
+                    if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                        DedicatedServer.this.issueCommand(s, DedicatedServer.this.getServerCommandListener());
                     }
-                } catch (IOException ioexception) {
-                    DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
+                    // CraftBukkit end
                 }
-
-                */
-                // Paper end
+            } catch (IOException ioexception) {
+                DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
             }
+
+            */
+            // Paper end
         };
 
+        Thread thread = one.tranic.vine.util.AnyThread.getThread(run, "Server console handler");
+
         // CraftBukkit start - TODO: handle command-line logging arguments
         java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
         global.setUseParentHandlers(false);
@@ -372,7 +372,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             }
 
             if (false && this.getMaxTickLength() > 0L) {  // Spigot - disable
-                Thread thread1 = new Thread(new ServerWatchdog(this));
+                Thread thread1 = one.tranic.vine.util.AnyThread.getThread(new ServerWatchdog(this));
 
                 thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(DedicatedServer.LOGGER));
                 thread1.setName("Server Watchdog");
@@ -530,7 +530,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                     sender.sendMessage(net.kyori.adventure.text.Component.text("Failed to dump chunk information, see console", net.kyori.adventure.text.format.NamedTextColor.RED));
                 }
             };
-            Thread t = new Thread(run);
+            Thread t = one.tranic.vine.util.AnyThread.getThread(run);
             t.setName("Async debug thread #" + ASYNC_DEBUG_CHUNKS_COUNT.getAndIncrement());
             t.setDaemon(true);
             t.start();
diff --git a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
index 9aaa8989832c238c66eb8c21256309cc37c2f18d..27d692e370e02ba4e7ba6262195ba01988918673 100644
--- a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
+++ b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
@@ -219,14 +219,15 @@ public class MinecraftServerGui extends JComponent {
         jpanel.add(jscrollpane, "Center");
         jpanel.add(jtextfield, "South");
         jpanel.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
-        this.logAppenderThread = new Thread(() -> {
+        Runnable run = () -> {
             String s;
 
             while ((s = LogQueues.getNextLogEvent("ServerGuiConsole")) != null) {
                 this.print(jtextarea, jscrollpane, s);
             }
 
-        });
+        };
+        this.logAppenderThread = one.tranic.vine.util.AnyThread.getThread(run);
         this.logAppenderThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(MinecraftServerGui.LOGGER));
         this.logAppenderThread.setDaemon(true);
         return jpanel;
diff --git a/src/main/java/net/minecraft/util/thread/NamedThreadFactory.java b/src/main/java/net/minecraft/util/thread/NamedThreadFactory.java
index 04460b81d6351f63103199a980e463070c233300..01d3ab53bdf12146b372dea464a4298325b682ed 100644
--- a/src/main/java/net/minecraft/util/thread/NamedThreadFactory.java
+++ b/src/main/java/net/minecraft/util/thread/NamedThreadFactory.java
@@ -19,7 +19,12 @@ public class NamedThreadFactory implements ThreadFactory {
 
     @Override
     public Thread newThread(Runnable runnable) {
-        Thread thread = new Thread(this.group, runnable, this.namePrefix + this.threadNumber.getAndIncrement(), 0L);
+        Thread thread;
+        if (one.tranic.vine.config.VineConfig.Feature.tryVirtualThreads) {
+            thread = Thread.ofVirtual().name(this.namePrefix + this.threadNumber.getAndIncrement()).unstarted(runnable);
+        } else {
+            thread = new Thread(this.group, runnable, this.namePrefix + this.threadNumber.getAndIncrement(), 0L);
+        }
         thread.setUncaughtExceptionHandler((threadx, throwable) -> {
             LOGGER.error("Caught exception in thread {} from {}", threadx, runnable);
             LOGGER.error("", throwable);
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 954d468459fe167ede0e7fca5b9f99da565d59e1..5b60a7fc75d0e2beafb8787fbe0708e07c7203f8 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -52,7 +52,7 @@ import org.slf4j.Logger;
 public class WorldUpgrader {
 
     static final Logger LOGGER = LogUtils.getLogger();
-    private static final ThreadFactory THREAD_FACTORY = (new ThreadFactoryBuilder()).setDaemon(true).build();
+    private static final ThreadFactory THREAD_FACTORY = (new ThreadFactoryBuilder()).setThreadFactory(one.tranic.vine.util.AnyThread.getFactory()).setDaemon(true).build();
     private static final String NEW_DIRECTORY_PREFIX = "new_";
     static final MutableComponent STATUS_UPGRADING_POI = Component.translatable("optimizeWorld.stage.upgrading.poi");
     static final MutableComponent STATUS_FINISHED_POI = Component.translatable("optimizeWorld.stage.finished.poi");
diff --git a/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java b/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java
index 8a4f95049c63afb28bef6719c77b7a7092e75aae..dcbe2cea667bf78b58c4312e65cd14cc96b1f359 100644
--- a/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java
@@ -53,7 +53,7 @@ public class Main {
             URLClassLoader classLoader = new URLClassLoader(extractedUrls.toArray(new URL[0]));
 
             System.out.println("Starting server");
-            Thread runThread = new Thread(() -> {
+            Runnable run = () -> {
                 try {
                     Class<?> mainClass = Class.forName(mainClassName, true, classLoader);
                     MethodHandle mainHandle = MethodHandles.lookup().findStatic(mainClass, "main", MethodType.methodType(void.class, String[].class)).asFixedArity();
@@ -61,8 +61,8 @@ public class Main {
                 } catch (Throwable t) {
                     Thrower.INSTANCE.sneakyThrow(t);
                 }
-            }, "ServerMain");
-
+            };
+            Thread runThread = one.tranic.vine.util.AnyThread.getThread(run, "ServerMain");
             runThread.setContextClassLoader(classLoader);
             runThread.start();
         } catch (Exception e) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
index 3c1992e212a6d6f1db4d5b807b38d71913619fc0..9533caf3c4afde5de9a3bc0723b65913d9004a46 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
@@ -40,9 +40,9 @@ public class CraftAsyncScheduler extends CraftScheduler {
 
     private final ThreadPoolExecutor executor = new ThreadPoolExecutor(
             4, Integer.MAX_VALUE,30L, TimeUnit.SECONDS, new SynchronousQueue<>(),
-            new ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread - %1$d").build());
+            new ThreadFactoryBuilder().setThreadFactory(one.tranic.vine.util.AnyThread.getFactory()).setNameFormat("Craft Scheduler Thread - %1$d").build());
     private final Executor management = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder()
-            .setNameFormat("Craft Async Scheduler Management Thread").build());
+            .setThreadFactory(one.tranic.vine.util.AnyThread.getFactory()).setNameFormat("Craft Async Scheduler Management Thread").build());
     private final List<CraftTask> temp = new ArrayList<>();
 
     CraftAsyncScheduler() {
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index da7d5efd76c9ef92e9ce22860fec791890a687be..23cb1c3c13df0bc1e21178d7b0f7fb24a3e197f5 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -2,6 +2,8 @@ package org.spigotmc;
 
 import java.io.File;
 import java.util.List;
+import java.util.Locale;
+
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.command.Command;
@@ -143,28 +145,24 @@ public class RestartCommand extends Command
         String[] split = restartScript.split( " " );
         if ( split.length > 0 && new File( split[0] ).isFile() )
         {
-            Thread shutdownHook = new Thread()
-            {
-                @Override
-                public void run()
+            Runnable run = () -> {
+                try
                 {
-                    try
+                    String os = System.getProperty( "os.name" ).toLowerCase(java.util.Locale.ENGLISH);
+                    if ( os.contains( "win" ) )
                     {
-                        String os = System.getProperty( "os.name" ).toLowerCase(java.util.Locale.ENGLISH);
-                        if ( os.contains( "win" ) )
-                        {
-                            Runtime.getRuntime().exec( "cmd /c start " + restartScript );
-                        } else
-                        {
-                            Runtime.getRuntime().exec( "sh " + restartScript );
-                        }
-                    } catch ( Exception e )
+                        Runtime.getRuntime().exec( "cmd /c start " + restartScript );
+                    } else
                     {
-                        e.printStackTrace();
+                        Runtime.getRuntime().exec( "sh " + restartScript );
                     }
+                } catch ( Exception e )
+                {
+                    e.printStackTrace();
                 }
             };
 
+            Thread shutdownHook = one.tranic.vine.util.AnyThread.getThread(run);
             shutdownHook.setDaemon( true );
             Runtime.getRuntime().addShutdownHook( shutdownHook );
             return true;
