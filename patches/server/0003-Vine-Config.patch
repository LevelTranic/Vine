From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 23 Jun 2024 21:01:06 +0800
Subject: [PATCH] Vine Config


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a7ffbbfd2a9fdeae0953ec8753ce48e93ccce086..9e58bce64d46a1ac12bcc067a07883069a27e482 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -121,6 +121,8 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            one.tranic.vine.config.ConfigUtil.load(); // Vine - load config
+
             ShreddedPaperConfigurationLoader.init((File) optionset.valueOf("shreddedpaper-settings")); // ShreddedPaper
 
             // Purpur start - load config files early
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d281fe5f75f6f99f869fa3cc8da4f1ff9f96a7bf..9863790cfea027a775fae3c26b0f4515216dc22b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,20 +1,14 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
@@ -63,9 +57,6 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
-import org.bukkit.craftbukkit.util.TerminalCompletionHandler;
-import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable; // Paper
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -224,6 +215,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
         this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
         // Paper end - initialize global and world-defaults configuration
+
+        one.tranic.vine.config.ConfigUtil.setCommand();
+
         // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
             this.getProfileCache().save(false); // Paper
diff --git a/src/main/java/one/tranic/vine/config/package-info.java b/src/main/java/one/tranic/vine/config/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..45f4c24cc689252513752e7b1cfa6736aa465f6b
--- /dev/null
+++ b/src/main/java/one/tranic/vine/config/package-info.java
@@ -0,0 +1,10 @@
+/**
+ * Vine Server configuration file package
+ * <p>
+ * If the public method needs to be called by Java, it needs to be annotated with @JvmStatic.
+ * If it is a field exposed to Java, it needs to be annotated with @JvmField.
+ * <p>
+ * If you need to modify this file, you'll need to modify the Vine Config commit using
+ * `git rebase -i HEAD~N` rather than patching it in a new patch.
+ * */
+package one.tranic.vine.config;
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/commands/VineCfgCommand.kt b/src/main/kotlin/one/tranic/vine/commands/VineCfgCommand.kt
new file mode 100644
index 0000000000000000000000000000000000000000..819da2962087ce70c6b9b4ec758937ef1b27e34d
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/commands/VineCfgCommand.kt
@@ -0,0 +1,39 @@
+package one.tranic.vine.commands
+
+import org.bukkit.command.Command
+import org.bukkit.command.CommandSender
+import net.kyori.adventure.text.Component
+import net.kyori.adventure.text.format.TextColor
+import one.tranic.vine.config.ConfigUtil
+
+class VineCfgCommand : Command("vinecfg") {
+    init {
+        this.permission = "vine.commands.cfg"
+        this.description = "Manage config file"
+        this.usage = "/vinecfg"
+    }
+
+    override fun execute(sender: CommandSender, commandLabel: String, args: Array<String>): Boolean {
+        if (!this.testPermission(sender)) {
+            sender.sendMessage(
+                Component
+                    .text("No permission to execute this command!")
+                    .color(TextColor.color(255, 0, 0))
+            )
+            return true
+        }
+
+        ConfigUtil.reload()
+
+        sender.sendMessage(
+            Component
+                .text("Reloaded Vine config file!")
+                .color(TextColor.color(0, 255, 0))
+        )
+        return true
+    }
+
+    override fun tabComplete(sender: CommandSender, alias: String, args: Array<String>): List<String> {
+        return emptyList()
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/ConfigImpl.kt b/src/main/kotlin/one/tranic/vine/config/ConfigImpl.kt
new file mode 100644
index 0000000000000000000000000000000000000000..67b571d421779c699aebf7312a2c2de45ef031e0
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/ConfigImpl.kt
@@ -0,0 +1,6 @@
+package one.tranic.vine.config
+
+interface ConfigImpl {
+    fun default()
+    fun load()
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/ConfigUtil.kt b/src/main/kotlin/one/tranic/vine/config/ConfigUtil.kt
new file mode 100644
index 0000000000000000000000000000000000000000..e45e91e6e5294bbd88041ea7e585cf90eb94f892
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/ConfigUtil.kt
@@ -0,0 +1,151 @@
+package one.tranic.vine.config
+
+import com.aayushatharva.brotli4j.Brotli4jLoader
+import org.bukkit.Bukkit
+import org.bukkit.configuration.file.YamlConfiguration
+import java.io.File
+
+import one.tranic.vine.commands.*
+import one.tranic.vine.config.module.Feature
+
+object ConfigUtil {
+    private lateinit var configuration: YamlConfiguration
+
+    @JvmStatic
+    fun setCommand() {
+        Bukkit.getCommandMap().register("vinecfg", "vine", VineCfgCommand())
+    }
+
+    /**
+     * Load the configuration file.
+     *
+     * This method should be called twice on the first load and only once
+     * thereafter to ensure that annotations are generated correctly.
+     *
+     * To be honest, I really want to split it up, such as using annotations
+     * like @Comment and @Path, and using reflection to automatically register
+     * configuration items, which may be much more convenient. However,
+     * perhaps because my method is wrong, it does not take effect in Kotlin,
+     * so I still register these configuration items manually.
+     * */
+    @JvmStatic
+    fun reload() {
+        runCatching {
+            val configFile = File("vine.yml")
+            if (!configFile.exists()) {
+                configFile.createNewFile()
+            }
+            configuration = YamlConfiguration.loadConfiguration(configFile)
+            addDefault(configFile)
+            loadConfigValue()
+        }.getOrElse {
+            throw RuntimeException(it)
+        }
+    }
+
+    @JvmStatic
+    fun load() {
+        reload()
+        reload()
+        // If SECTORFILE is enabled and BROTLI is selected as the compression format,
+        // initialize the dependent libraries.
+        if (Feature.isRegionFormat == "SECTORFILE" && Feature.regionCompressionFormat == "BROTLI") {
+            Brotli4jLoader.ensureAvailability()
+        }
+    }
+
+    private fun addDefault(configFile: File) {
+        configuration.options().setHeader(
+            listOf(
+                "Vine Abstract Configuration",
+                "Vine Github: https://github.com/LevelTranic/Vine",
+                "It is recommended to always keep the latest version, download it at https://tranic.one/downloads/vine"
+            )
+        )
+
+        one.tranic.vine.config.module.Fix.default()
+        one.tranic.vine.config.module.Feature.default()
+        one.tranic.vine.config.module.Optimize.default()
+
+        configuration.options().copyDefaults(true)
+        configuration.save(configFile)
+    }
+
+    private fun loadConfigValue() {
+        one.tranic.vine.config.module.Fix.load()
+        one.tranic.vine.config.module.Feature.load()
+        one.tranic.vine.config.module.Optimize.load()
+    }
+
+    // Vine start - Configuration file tools
+    fun addDefault(path: String, value: Any) {
+        configuration.addDefault(path, value)
+    }
+
+    fun addDefault(path: String, value: Any, comment: String) {
+        configuration.addDefault(path, value)
+        configuration.setComments(path, listOf(comment))
+    }
+
+    fun addComment(path: String, comment: String) {
+        configuration.setComments(path, listOf(comment))
+    }
+
+    fun addComment(path: String, comment: List<String>) {
+        configuration.setComments(path, comment)
+    }
+
+    fun addDefault(path: String, value: Any, comment: List<String>) {
+        configuration.addDefault(path, value)
+        configuration.setComments(path, comment)
+    }
+
+    fun getBoolean(path: String): Boolean {
+        return configuration.getBoolean(path)
+    }
+
+    fun getBoolean(path: String, function: (it: Boolean) -> Unit) {
+        function(getBoolean(path))
+    }
+
+    fun getDouble(path: String): Double {
+        return configuration.getDouble(path)
+    }
+
+    fun getDouble(path: String, function: (it: Double) -> Unit) {
+        function(getDouble(path))
+    }
+
+    fun getInt(path: String): Int {
+        return configuration.getInt(path)
+    }
+
+    fun getInt(path: String, function: (it: Int) -> Unit) {
+        function(getInt(path))
+    }
+
+    fun getString(path: String): String? {
+        return configuration.getString(path)
+    }
+
+    fun getString(path: String, function: (it: String?) -> Unit) {
+        function(getString(path))
+    }
+
+    fun getList(path: String): MutableList<*>? {
+        return configuration.getList(path)
+    }
+
+    fun getStringList(path: String): MutableList<String> {
+        return configuration.getStringList(path)
+    }
+
+    fun getStringList(path: String, function: (it: MutableList<String>) -> Unit) {
+        function(getStringList(path))
+    }
+
+    fun getMapList(path: String): MutableList<MutableMap<*, *>> {
+        return configuration.getMapList(path)
+    }
+    // Vine end - Configuration file tools
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/VineLogger.kt b/src/main/kotlin/one/tranic/vine/config/VineLogger.kt
new file mode 100644
index 0000000000000000000000000000000000000000..58ad9bdcba665b54bcde3ad05a01127ab62c6838
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/VineLogger.kt
@@ -0,0 +1,49 @@
+package one.tranic.vine.config
+
+import net.minecraft.server.MinecraftServer
+
+object VineLogger {
+    private val logger: org.slf4j.Logger = MinecraftServer.LOGGER
+
+    fun info(msg: String) {
+        logger.info(msg)
+    }
+
+    fun info(msg: String, vararg args: Any) {
+        logger.info(msg, args)
+    }
+
+    fun info(msg: List<String>) {
+        for (str in msg) {
+            logger.info(str)
+        }
+    }
+
+    fun warn(msg: String) {
+        logger.warn(msg)
+    }
+
+    fun warn(msg: String, vararg args: Any) {
+        logger.warn(msg, args)
+    }
+
+    fun warn(msg: List<String>) {
+        for (str in msg) {
+            logger.warn(str)
+        }
+    }
+
+    fun error(msg: String) {
+        logger.error(msg)
+    }
+
+    fun error(msg: String, vararg args: Any) {
+        logger.error(msg, args)
+    }
+
+    fun error(msg: List<String>) {
+        for (str in msg) {
+            logger.error(str)
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/Feature.kt b/src/main/kotlin/one/tranic/vine/config/module/Feature.kt
new file mode 100644
index 0000000000000000000000000000000000000000..a109f00733081fe8a015fcf178e46b208de11aec
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/Feature.kt
@@ -0,0 +1,196 @@
+package one.tranic.vine.config.module
+
+import one.tranic.vine.config.ConfigImpl
+import one.tranic.vine.config.ConfigUtil.addDefault
+import one.tranic.vine.config.ConfigUtil.getBoolean
+import one.tranic.vine.config.ConfigUtil.getInt
+import one.tranic.vine.config.ConfigUtil.getString
+import one.tranic.vine.config.VineConfig.Feature
+import one.tranic.vine.config.VineLogger
+
+object Feature : ConfigImpl {
+    var isPlatform: Boolean? = null
+    private var isSecureSeed: Boolean? = null
+    var isRegionFormat: String? = null
+    var regionCompressionFormat: String? = null
+    private var isRegionCompressionLevel: Int? = null
+
+    override fun default() {
+        addDefault(
+            "feature.try-virtual-threads",
+            false,
+            listOf(
+                "Try virtual threads. Once enabled, all explicit platform threads will ",
+                "be replaced with virtual threads as much as possible, which may have ",
+                "some adverse consequences. Please enable it with caution."
+            )
+        )
+        addDefault("feature.vanilla-hopper", false)
+        addDefault(
+            "feature.flatten-triangular-distribution",
+            false,
+            listOf(
+                "Change all triangle distribution in Minecraft randomizers into uniform distribution",
+                "With that edge cases are more likely to happen"
+            )
+        )
+        addDefault("feature.zero-tick-plants", false)
+        addDefault(
+            "feature.disable-respawn-ceiling",
+            false,
+            listOf(
+                "If the player is blocked on the top of the player's head, he will not try to rebirth ",
+                "the player on the ceiling.",
+                "This is suitable for those servers with ceilings."
+            )
+        )
+        addDefault(
+            "feature.secure-seed", false, listOf(
+                "Changes the seed from 64bit to 1024bit, this will strictly secure your seed,",
+                "making it almost impossible to crack.",
+                "Warning: You must delete existing maps to switch the state of the secure seed,",
+                "and do not modify it during hot loading, otherwise the server will crash and",
+                "cannot continue to load maps."
+            )
+        )
+        addDefault("feature.disable-spark", true)
+
+        addDefault(
+            "feature.dont-save-entity.primed-tnt", false, listOf(
+                "Disable save primed tnt on chunk unloads.",
+                "Useful for redstone server, can prevent machine be exploded by TNT,",
+                "when player disconnected caused by Internet issue."
+            )
+        )
+        addDefault("feature.dont-save-entity.falling-block", false)
+
+        addDefault(
+            "feature.cache-player-profile-result.enabled",
+            true,
+            listOf(
+                "Cache the player profile result on they first join.",
+                "It's useful if Mojang's verification server is down."
+            )
+        )
+        addDefault("feature.cache-player-profile-result.timeout", 1440, "The timeout of the cache. Unit: Minutes.")
+
+        addDefault(
+            "feature.region.format",
+            "ANVIL",
+            listOf(
+                "Region Format: ANVIL (Default), LINEAR, SECTORFILE",
+                "LINEAR: https://github.com/xymb-endcrystalme/LinearRegionFileFormatTools",
+                "SECTORFILE: https://github.com/PaperMC/SectorTool/blob/master/SPECIFICATION.MD",
+                "If you are not worried about disk capacity, please do not use Linear, it is still",
+                "experimental and may cause data corruption."
+            )
+        )
+        addDefault(
+            "feature.region.compression-format", "ZSTD", listOf(
+                "Only applicable to SECTORFILE, support list:",
+                "\"GZIP, ZLIB, LZ4, BROTLI, ZSTD\"",
+                "Brotli is only available on TranicServer for Vine.",
+                "There is currently no tool to convert it back to ANVIL. Enable with caution!"
+            )
+        )
+        addDefault(
+            "feature.region.compression-level",
+            1,
+            listOf(
+                "Only applicable to Linear, this is the compression level provided by ZSTD.",
+                "The available range is 1-22. When the compression level exceeds 14, ",
+                "the CPU pressure, chunk refresh time and memory usage will increase significantly, ",
+                "and high compression levels have the risk of losing chunk data, ",
+                "so we will limit it to the range of 1-15 to avoid some simple problems."
+            )
+        )
+        addDefault("feature.region.flush-frequency", 5, "Only applicable to Linear, chunk refresh interval, default is 5 (seconds)")
+    }
+
+    override fun load() {
+        getBoolean("feature.try-virtual-threads") {
+            if (isPlatform == null) {
+                if (it) {
+                    VineLogger.warn(
+                        listOf(
+                            "Virtual threads are enabled.",
+                            "Vine will try to replace all explicit platform threads with virtual threads,",
+                            "which may have some undesirable consequences. Do not use it in production if",
+                            "you are not sure it will be stable.",
+                            "The ShreddedPaper thread will continue to use the platform thread."
+                        )
+                    )
+                }
+                Feature.tryVirtualThreads = it
+                isPlatform = !it
+            } else if (it == isPlatform) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.try-virtual-threads\" during runtime!!!")
+            }
+        }
+        Feature.vanillaHopper = getBoolean("feature.vanilla-hopper")
+        Feature.flattenTriangularDistribution = getBoolean("feature.flatten-triangular-distribution")
+        Feature.zeroTickPlants = getBoolean("feature.zero-tick-plants")
+        Feature.disableRespawnCeiling = getBoolean("feature.disable-respawn-ceiling")
+        getBoolean("feature.secure-seed") {
+            if (isSecureSeed == null) {
+                Feature.secureSeed = it
+                isSecureSeed = it
+                if (it) VineLogger.warn("SecureSeed has been enabled, and this value cannot be modified before deleting the map.")
+            } else if (isSecureSeed != it) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.secure-seed\" during runtime!!!")
+            }
+        }
+        Feature.disableSpark = getBoolean("feature.disable-spark")
+
+        Feature.DSE.primedTNT = getBoolean("feature.dont-save-entity.primed-tnt")
+        Feature.DSE.fallingBlock = getBoolean("feature.dont-save-entity.falling-block")
+
+        Feature.cachePlayerProfileResult.enabled = getBoolean("feature.cache-player-profile-result.enabled")
+        Feature.cachePlayerProfileResult.timeout = getInt("feature.cache-player-profile-result.timeout")
+
+        getString("feature.region.format") {
+            if (isRegionFormat == null) {
+                when(it) {
+                    "ANVIL", "LINEAR", "SECTORFILE" -> isRegionFormat = it
+                    else -> {
+                        VineLogger.error("What is $it in \"feature.region.format\"? It has been changed to the default \"ANVIL\".")
+                        isRegionFormat = "ANVIL"
+                    }
+                }
+                Feature.Region.format = isRegionFormat
+            } else if (isRegionFormat != it) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.region.format\" during runtime!!!")
+            }
+        }
+        getString("feature.region.compression-format") {
+            if (regionCompressionFormat == null) {
+                when(it) {
+                    "GZIP", "ZLIB", "LZ4", "BROTLI", "ZSTD" -> regionCompressionFormat = it
+                    else -> {
+                        VineLogger.error("What is $it in \"feature.region.compression-format\"? It has been changed to the default \"ZSTD\".")
+                        regionCompressionFormat = "ZSTD"
+                    }
+                }
+                Feature.Region.compressionFormat = regionCompressionFormat
+            } else if (regionCompressionFormat != it) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.region.compression-format\" during runtime!!!")
+            }
+        }
+        getInt("feature.region.compression-level") {
+            if (isRegionCompressionLevel == null) {
+                isRegionCompressionLevel = if (it < 1) {
+                    1
+                } else if (it > 15) {
+                    15
+                } else {
+                    it
+                }
+                Feature.Region.compressionLevel = isRegionCompressionLevel!!
+            } else if (isRegionCompressionLevel != it) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.region.compression-level\" during runtime!!!")
+            }
+        }
+        Feature.Region.flushFrequency = getInt("feature.region.flush-frequency")
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/Fix.kt b/src/main/kotlin/one/tranic/vine/config/module/Fix.kt
new file mode 100644
index 0000000000000000000000000000000000000000..afdf8f0c98d9b42f3cce19d3387c716af2e2f173
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/Fix.kt
@@ -0,0 +1,53 @@
+package one.tranic.vine.config.module
+
+import one.tranic.vine.config.ConfigImpl
+import one.tranic.vine.config.ConfigUtil.addDefault
+import one.tranic.vine.config.ConfigUtil.getBoolean
+import one.tranic.vine.config.VineConfig.Fix
+
+object Fix: ConfigImpl {
+    override fun default() {
+        addDefault(
+            "fix.nether-portal",
+            false,
+            "Ensures correct destinations when travelling back and forth through Nether Portals in Multiplayer."
+        )
+        addDefault(
+            "fix.anvil-drop.enabled",
+            true,
+            listOf(
+                "This fix will attempt to prevent the bug in https://github.com/PaperMC/Folia/issues/217, ",
+                "it may cause some unexpected effects but should be harmless."
+            )
+        )
+        addDefault(
+            "fix.anvil-drop.debug", false,
+            "Whether to print detailed information to the console when this issue is triggered"
+        )
+        addDefault(
+            "fix.explosion-breaks-item-frame-in-water",
+            false,
+            listOf(
+                "Fixes Explosions being able to destroy item frames in water",
+                "Fixes: https://bugs.mojang.com/browse/MC-3697"
+            )
+        )
+        addDefault(
+            "fix.incorrect-bounce-logic",
+            false,
+            listOf(
+                "Fixes some entities not bouncing on slime blocks and getting stuck",
+                "Fixes: https://bugs.mojang.com/browse/MC-216985"
+            )
+        )
+    }
+
+    override fun load() {
+        Fix.netherPortal = getBoolean("fix.nether-portal")
+        Fix.AnvilDrop.enabled = getBoolean("fix.anvil-drop.enabled")
+        Fix.AnvilDrop.debug = getBoolean("fix.anvil-drop.debug")
+        Fix.explosionBreaksItemFrameInWater = getBoolean("fix.explosion-breaks-item-frame-in-water")
+        Fix.incorrectBounceLogic = getBoolean("fix.incorrect-bounce-logic")
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/Optimize.kt b/src/main/kotlin/one/tranic/vine/config/module/Optimize.kt
new file mode 100644
index 0000000000000000000000000000000000000000..98160f1489e7f38ebf8fbc5c5336a297acab832c
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/Optimize.kt
@@ -0,0 +1,64 @@
+package one.tranic.vine.config.module
+
+import one.tranic.vine.config.ConfigImpl
+import one.tranic.vine.config.ConfigUtil.addDefault
+import one.tranic.vine.config.ConfigUtil.getBoolean
+import one.tranic.vine.config.ConfigUtil.getInt
+import one.tranic.vine.config.VineConfig.Optimize
+
+object Optimize: ConfigImpl {
+    override fun default() {
+        addDefault("optimize.floating-point-positive", false)
+        addDefault(
+            "optimize.skip-self-raid-check",
+            false,
+            listOf(
+                "Whether to skip some raid checks.",
+                "Enabling this will significantly reduce the server's performance."
+            )
+        )
+        addDefault(
+            "optimize.minecart.enabled", true,
+            listOf(
+                "Enable this feature to handle large amount of stacked Minecart better.",
+                "By skipping tick collisions to reduce expense getting entities list",
+                "and bukkit event calls, useful for the anarchy server."
+            )
+        )
+        addDefault("optimize.minecart.skipTickCount", 30)
+
+        addDefault(
+            "optimize.mob-re-pathfinding",
+            true,
+            "If true, disables the frequent pathfinds done while already following a path"
+        )
+        addDefault(
+            "optimize.zombie-search-and-destroy-turtle-egg.enabled",
+            false,
+            "If true, optimizes the expensive searching done to find a turtle egg to crush, for zombies/husks, by default fully disabling it"
+        )
+        addDefault(
+            "optimize.zombie-search-and-destroy-turtle-egg.percent-chance",
+            40,
+            "Percent chance to run for task: zombie seeking turtle eggs to destroy"
+        )
+
+        addDefault("optimize.noise-generation", true)
+    }
+
+    override fun load() {
+        Optimize.Minecart.enabled = getBoolean("optimize.minecart.enabled")
+        Optimize.Minecart.skipTickCount = getInt("optimize.minecart.skipTickCount")
+
+        Optimize.skipSelfRaidCheck = getBoolean("optimize.skip-self-raid-check")
+        Optimize.mobRePathfinding = getBoolean("optimize.mob-re-pathfinding")
+        Optimize.TurtleEggSearch.enabled =
+            getBoolean("optimize.zombie-search-and-destroy-turtle-egg.enabled")
+        Optimize.TurtleEggSearch.percentChance =
+            getInt("optimize.zombie-search-and-destroy-turtle-egg.percent-chance")
+
+        Optimize.noiseGeneration = getBoolean("optimize.noise-generation")
+        Optimize.floatingPointPositive = getBoolean("optimize.floating-point-positive")
+    }
+
+}
\ No newline at end of file
