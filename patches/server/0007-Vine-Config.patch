From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 23 Jun 2024 21:01:06 +0800
Subject: [PATCH] Vine Config


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a7ffbbfd2a9fdeae0953ec8753ce48e93ccce086..9e58bce64d46a1ac12bcc067a07883069a27e482 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -121,6 +121,8 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            one.tranic.vine.config.ConfigUtil.load(); // Vine - load config
+
             ShreddedPaperConfigurationLoader.init((File) optionset.valueOf("shreddedpaper-settings")); // ShreddedPaper
 
             // Purpur start - load config files early
diff --git a/src/main/java/one/tranic/vine/config/package-info.java b/src/main/java/one/tranic/vine/config/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..45f4c24cc689252513752e7b1cfa6736aa465f6b
--- /dev/null
+++ b/src/main/java/one/tranic/vine/config/package-info.java
@@ -0,0 +1,10 @@
+/**
+ * Vine Server configuration file package
+ * <p>
+ * If the public method needs to be called by Java, it needs to be annotated with @JvmStatic.
+ * If it is a field exposed to Java, it needs to be annotated with @JvmField.
+ * <p>
+ * If you need to modify this file, you'll need to modify the Vine Config commit using
+ * `git rebase -i HEAD~N` rather than patching it in a new patch.
+ * */
+package one.tranic.vine.config;
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/ConfigUtil.kt b/src/main/kotlin/one/tranic/vine/config/ConfigUtil.kt
new file mode 100644
index 0000000000000000000000000000000000000000..9d8671f2902cfce4ce1f69c808907500069d27ba
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/ConfigUtil.kt
@@ -0,0 +1,86 @@
+package one.tranic.vine.config
+
+import com.aayushatharva.brotli4j.Brotli4jLoader
+import one.tranic.vine.region.Compression
+import one.tranic.vine.region.Format
+import one.tranic.vine.util.VineLogger
+import org.bukkit.configuration.file.YamlConfiguration
+import java.io.File
+
+object ConfigUtil {
+    private lateinit var configuration: YamlConfiguration
+
+    fun getConfiguration() : YamlConfiguration {
+        return configuration
+    }
+
+    /**
+     * Load the configuration file.
+     *
+     * This method should be called twice on the first load and only once
+     * thereafter to ensure that annotations are generated correctly.
+     *
+     * To be honest, I really want to split it up, such as using annotations
+     * like @Comment and @Path, and using reflection to automatically register
+     * configuration items, which may be much more convenient. However,
+     * perhaps because my method is wrong, it does not take effect in Kotlin,
+     * so I still register these configuration items manually.
+     * */
+    @JvmStatic
+    fun reload() {
+        runCatching {
+            val configFile = File("vine.yml")
+            if (!configFile.exists()) {
+                configFile.createNewFile()
+            }
+            configuration = YamlConfiguration.loadConfiguration(configFile)
+            addDefault(configFile)
+            one.tranic.vine.config.module.Module.load()
+        }.getOrElse {
+            throw RuntimeException(it)
+        }
+    }
+
+    @JvmStatic
+    fun load() {
+        reload()
+        reload()
+        // If SECTORFILE is enabled and BROTLI is selected as the compression format,
+        // initialize the dependent libraries.
+        if (Format.equals(Format.SECTORFILE) && Compression.equals(Compression.BROTLI)) {
+            Brotli4jLoader.ensureAvailability()
+            VineLogger.warn(
+                listOf(
+                    "****************************",
+                    "Brotli in SectorFile currently faces poor performance issues,",
+                    "it is recommended to choose ZSTD instead of Brotli",
+                    "****************************"
+                )
+            )
+        }
+        VineLogger.warn(
+            listOf(
+                "******************************************",
+                "Since Vine is compatible with multiple region formats, it is not possible to automatically convert between them. ",
+                "Currently, it only supports conversion between ANVIL and SectorFile.",
+                "If you have relevant needs, please download the relevant tools to convert region formats.",
+                "******************************************"
+            )
+        )
+    }
+
+    private fun addDefault(configFile: File) {
+        configuration.options().setHeader(
+            listOf(
+                "Vine Abstract Configuration",
+                "Vine Github: https://github.com/LevelTranic/Vine",
+                "It is recommended to always keep the latest version, download it at https://tranic.one/downloads/vine"
+            )
+        )
+
+        one.tranic.vine.config.module.Module.default()
+
+        configuration.options().copyDefaults(true)
+        configuration.save(configFile)
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/impl/ConfigImpl.kt b/src/main/kotlin/one/tranic/vine/config/impl/ConfigImpl.kt
new file mode 100644
index 0000000000000000000000000000000000000000..173945a287f4d66ffc0373d0e0db9ba553bcce6e
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/impl/ConfigImpl.kt
@@ -0,0 +1,6 @@
+package one.tranic.vine.config.impl
+
+interface ConfigImpl {
+    fun default()
+    fun load()
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/Locker.kt b/src/main/kotlin/one/tranic/vine/config/module/Locker.kt
new file mode 100644
index 0000000000000000000000000000000000000000..d336332ccdd0fb8d78da01004981fea5716fa29e
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/Locker.kt
@@ -0,0 +1,12 @@
+package one.tranic.vine.config.module
+
+import one.tranic.vine.region.Compression
+import one.tranic.vine.region.Format
+
+object Locker {
+    var compressionFormat: Compression? = null
+    var regionFormat: Format? = null
+    var regionCompressionLevel: Int? = null
+    var secureSeed: Boolean? = null
+    var virtualThread: Boolean? = null
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/Module.kt b/src/main/kotlin/one/tranic/vine/config/module/Module.kt
new file mode 100644
index 0000000000000000000000000000000000000000..b3b73d63002001de4b1cce5a58a2ab1a1e3423ba
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/Module.kt
@@ -0,0 +1,30 @@
+package one.tranic.vine.config.module
+
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.util.Reflect
+
+object Module : ConfigImpl {
+    private val clazz: ArrayList<ConfigImpl> = ArrayList()
+
+    private fun ArrayList<ConfigImpl>.addImpl(packageName: String) {
+        this.addAll(Reflect.findObjectClass(packageName))
+    }
+
+    init {
+        clazz.addImpl("one.tranic.vine.config.module.feature")
+        clazz.addImpl("one.tranic.vine.config.module.fix")
+        clazz.addImpl("one.tranic.vine.config.module.optimize")
+    }
+
+    override fun default() {
+        for (c in clazz) {
+            c.default()
+        }
+    }
+
+    override fun load() {
+        for (c in clazz) {
+            c.load()
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/feature/DontSaveEntity.kt b/src/main/kotlin/one/tranic/vine/config/module/feature/DontSaveEntity.kt
new file mode 100644
index 0000000000000000000000000000000000000000..4ef2c93051d7baa4ba78dd7b83dfffc424178539
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/feature/DontSaveEntity.kt
@@ -0,0 +1,23 @@
+package one.tranic.vine.config.module.feature
+
+import one.tranic.vine.config.VineConfig.Feature
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.util.ConfigHelper
+
+object DontSaveEntity : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "feature.dont-save-entity.primed-tnt", false, listOf(
+                "Disable save primed tnt on chunk unloads.",
+                "Useful for redstone server, can prevent machine be exploded by TNT,",
+                "when player disconnected caused by Internet issue."
+            )
+        )
+        addDefault("feature.dont-save-entity.falling-block", false)
+    }
+
+    override fun load() {
+        Feature.DSE.primedTNT = getBoolean("feature.dont-save-entity.primed-tnt")
+        Feature.DSE.fallingBlock = getBoolean("feature.dont-save-entity.falling-block")
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/feature/PlayerProfile.kt b/src/main/kotlin/one/tranic/vine/config/module/feature/PlayerProfile.kt
new file mode 100644
index 0000000000000000000000000000000000000000..080c59fc6f0d0d3fc405e121e5b04255a8be8d63
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/feature/PlayerProfile.kt
@@ -0,0 +1,24 @@
+package one.tranic.vine.config.module.feature
+
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.VineConfig.Feature
+import one.tranic.vine.config.util.ConfigHelper
+
+object PlayerProfile: ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "feature.cache-player-profile-result.enabled",
+            true,
+            listOf(
+                "Cache the player profile result on they first join.",
+                "It's useful if Mojang's verification server is down."
+            )
+        )
+        addDefault("feature.cache-player-profile-result.timeout", 1440, "The timeout of the cache. Unit: Minutes.")
+    }
+
+    override fun load() {
+        Feature.cachePlayerProfileResult.enabled = getBoolean("feature.cache-player-profile-result.enabled")
+        Feature.cachePlayerProfileResult.timeout = getInt("feature.cache-player-profile-result.timeout")
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/feature/Region.kt b/src/main/kotlin/one/tranic/vine/config/module/feature/Region.kt
new file mode 100644
index 0000000000000000000000000000000000000000..3d2428afd9fc055e0d63165268951edfa1a36d44
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/feature/Region.kt
@@ -0,0 +1,85 @@
+package one.tranic.vine.config.module.feature
+
+import one.tranic.vine.config.VineConfig.Feature
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.module.Locker
+import one.tranic.vine.config.util.ConfigHelper
+import one.tranic.vine.region.Compression
+import one.tranic.vine.region.Format
+import one.tranic.vine.util.VineLogger
+
+object Region : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "feature.region.format",
+            "ANVIL",
+            listOf(
+                "Region Format: ANVIL (Default), LINEAR, SECTORFILE",
+                "LINEAR: https://github.com/xymb-endcrystalme/LinearRegionFileFormatTools",
+                "SECTORFILE: https://github.com/PaperMC/SectorTool/blob/master/SPECIFICATION.MD",
+                "If you are not worried about disk capacity, please do not use Linear, it is still",
+                "experimental and may cause data corruption."
+            )
+        )
+        addDefault(
+            "feature.region.compression-format", "ZSTD", listOf(
+                "Only applicable to SECTORFILE, support list:",
+                "\"GZIP, ZLIB, NONE, LZ4, BROTLI, SNAPPY, ZSTD\"",
+                "Brotli is only available on TranicServer for Vine.",
+                "There is currently no tool to convert it back to ANVIL. Enable with caution!"
+            )
+        )
+        addDefault(
+            "feature.region.compression-level",
+            1,
+            listOf(
+                "Only applicable to Linear, this is the compression level provided by ZSTD.",
+                "The available range is 1-22. When the compression level exceeds 14, ",
+                "the CPU pressure, chunk refresh time and memory usage will increase significantly, ",
+                "and high compression levels have the risk of losing chunk data, ",
+                "so we will limit it to the range of 1-15 to avoid some simple problems."
+            )
+        )
+        addDefault(
+            "feature.region.flush-frequency",
+            5,
+            "Only applicable to Linear, chunk refresh interval, default is 5 (seconds)"
+        )
+    }
+
+    override fun load() {
+        getString("feature.region.format") {
+            val b = Format.getFormat(it)
+            if (Locker.regionFormat == null) {
+                Locker.regionFormat = b
+                Format.setNow(b)
+            } else if (!b.equals(Locker.regionFormat)) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.region.format\" during runtime!!!")
+            }
+        }
+        getString("feature.region.compression-format") {
+            val b = Compression.getCompression(it)
+            if (Locker.compressionFormat == null) {
+                Locker.compressionFormat = b
+                Compression.setNow(b)
+            } else if (!b.equals(Locker.compressionFormat)) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.region.compression-format\" during runtime!!!")
+            }
+        }
+        getInt("feature.region.compression-level") {
+            if (Locker.regionCompressionLevel == null) {
+                Locker.regionCompressionLevel = if (it < 1) {
+                    1
+                } else if (it > 15) {
+                    15
+                } else {
+                    it
+                }
+                Feature.Region.compressionLevel = Locker.regionCompressionLevel!!
+            } else if (Locker.regionCompressionLevel != it) {
+                VineLogger.error("Forbidden to modify the parameter \"feature.region.compression-level\" during runtime!!!")
+            }
+        }
+        Feature.Region.flushFrequency = getInt("feature.region.flush-frequency")
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/feature/Value.kt b/src/main/kotlin/one/tranic/vine/config/module/feature/Value.kt
new file mode 100644
index 0000000000000000000000000000000000000000..fda5396e1e05a550859c80c0753678d61fc0eec5
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/feature/Value.kt
@@ -0,0 +1,89 @@
+package one.tranic.vine.config.module.feature
+
+import one.tranic.vine.config.VineConfig.Feature
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.module.Locker
+import one.tranic.vine.config.util.ConfigHelper
+import one.tranic.vine.util.VineLogger
+
+object Value : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault("feature.disable-spark", true)
+        addDefault(
+            "feature.disable-respawn-ceiling",
+            false,
+            listOf(
+                "If the player is blocked on the top of the player's head, he will not try to rebirth ",
+                "the player on the ceiling.",
+                "This is suitable for those servers with ceilings."
+            )
+        )
+        addDefault(
+            "feature.flatten-triangular-distribution",
+            false,
+            listOf(
+                "Change all triangle distribution in Minecraft randomizers into uniform distribution",
+                "With that edge cases are more likely to happen"
+            )
+        )
+        addDefault("feature.liquid-physics", false, "The new liquid physics system may affect some mechanisms.")
+        addDefault(
+            "feature.secure-seed", false, listOf(
+                "Changes the seed from 64bit to 1024bit, this will strictly secure your seed,",
+                "making it almost impossible to crack.",
+                "Warning: You must delete existing maps to switch the state of the secure seed,",
+                "and do not modify it during hot loading, otherwise the server will crash and",
+                "cannot continue to load maps."
+            )
+        )
+        addDefault(
+            "feature.try-virtual-threads",
+            false,
+            listOf(
+                "Try virtual threads. Once enabled, all explicit platform threads will ",
+                "be replaced with virtual threads as much as possible, which may have ",
+                "some adverse consequences. Please enable it with caution."
+            )
+        )
+        addDefault("feature.vanilla-hopper", false)
+        addDefault("feature.zero-tick-plants", false)
+    }
+
+    override fun load() {
+        Feature.disableSpark = getBoolean("feature.disable-spark")
+        Feature.disableRespawnCeiling = getBoolean("feature.disable-respawn-ceiling")
+        Feature.flattenTriangularDistribution = getBoolean("feature.flatten-triangular-distribution")
+        Feature.liquidPhysics = getBoolean("feature.liquid-physics")
+        getBoolean("feature.secure-seed") {
+            if (Locker.secureSeed == null) {
+                Feature.secureSeed = it
+                Locker.secureSeed = it
+                if (it) VineLogger.warn("** SecureSeed has been enabled, and this value cannot be modified before deleting the map.")
+            } else if (Locker.secureSeed != it) {
+                VineLogger.get().error("Forbidden to modify the parameter \"feature.secure-seed\" during runtime!!!")
+            }
+        }
+        getBoolean("feature.try-virtual-threads") {
+            if (Locker.virtualThread == null) {
+                if (it) {
+                    VineLogger.warn(
+                        listOf(
+                            "********",
+                            "Virtual threads enabled.",
+                            "Will try to offload threads other than ShreddedPaper and ChunkThread to dummy threads",
+                            "This feature is very experimental and may have some undesirable consequences",
+                            "********"
+                        )
+                    )
+                }
+                Feature.tryVirtualThreads = it
+                Locker.virtualThread = it
+            } else if (it != Locker.virtualThread) {
+                VineLogger.get()
+                    .error("Forbidden to modify the parameter \"feature.try-virtual-threads\" during runtime!!!")
+            }
+        }
+        Feature.vanillaHopper = getBoolean("feature.vanilla-hopper")
+        Feature.zeroTickPlants = getBoolean("feature.zero-tick-plants")
+    }
+}
diff --git a/src/main/kotlin/one/tranic/vine/config/module/fix/AnvilDrop.kt b/src/main/kotlin/one/tranic/vine/config/module/fix/AnvilDrop.kt
new file mode 100644
index 0000000000000000000000000000000000000000..4492e818c6eb255b066f12864d4ac7726d1b5e67
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/fix/AnvilDrop.kt
@@ -0,0 +1,29 @@
+package one.tranic.vine.config.module.fix
+
+import one.tranic.vine.config.VineConfig.Fix
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.util.ConfigHelper
+
+object AnvilDrop : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "fix.anvil-drop.enabled",
+            true,
+            listOf(
+                "This fix will attempt to prevent the bug in https://github.com/PaperMC/Folia/issues/217, ",
+                "it may cause some unexpected effects but should be harmless."
+            )
+        )
+        addDefault(
+            "fix.anvil-drop.debug", false,
+            "Whether to print detailed information to the console when this issue is triggered"
+        )
+    }
+
+    override fun load() {
+        Fix.AnvilDrop.enabled = getBoolean("fix.anvil-drop.enabled")
+        Fix.AnvilDrop.debug = getBoolean("fix.anvil-drop.debug")
+
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/fix/Value.kt b/src/main/kotlin/one/tranic/vine/config/module/fix/Value.kt
new file mode 100644
index 0000000000000000000000000000000000000000..10b3cffdfc28bc77a3e3b4deace76743f7eb62a5
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/fix/Value.kt
@@ -0,0 +1,43 @@
+package one.tranic.vine.config.module.fix
+
+import one.tranic.vine.config.VineConfig.Fix
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.util.ConfigHelper
+
+object Value : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "fix.explosion-breaks-item-frame-in-water",
+            false,
+            listOf(
+                "Fixes Explosions being able to destroy item frames in water",
+                "Fixes: https://bugs.mojang.com/browse/MC-3697"
+            )
+        )
+        addDefault(
+            "fix.incorrect-bounce-logic",
+            false,
+            listOf(
+                "Fixes some entities not bouncing on slime blocks and getting stuck",
+                "Fixes: https://bugs.mojang.com/browse/MC-216985"
+            )
+        )
+        addDefault(
+            "fix.nether-portal",
+            false,
+            "Ensures correct destinations when travelling back and forth through Nether Portals in Multiplayer."
+        )
+        addDefault(
+            "fix.villagers-dont-release-memory",
+            false,
+        )
+    }
+
+    override fun load() {
+        Fix.explosionBreaksItemFrameInWater = getBoolean("fix.explosion-breaks-item-frame-in-water")
+        Fix.incorrectBounceLogic = getBoolean("fix.incorrect-bounce-logic")
+        Fix.netherPortal = getBoolean("fix.nether-portal")
+        Fix.villagersDontReleaseMemory = getBoolean("fix.villagers-dont-release-memory")
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/optimize/LoadChunks.kt b/src/main/kotlin/one/tranic/vine/config/module/optimize/LoadChunks.kt
new file mode 100644
index 0000000000000000000000000000000000000000..d6bef73328f6aafb202967ddf29b8b3e579c906c
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/optimize/LoadChunks.kt
@@ -0,0 +1,19 @@
+package one.tranic.vine.config.module.optimize
+
+import one.tranic.vine.config.VineConfig.Optimize
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.util.ConfigHelper
+
+object LoadChunks: ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "optimize.load-chunks.spawn-phantoms", true
+        )
+        addDefault("optimize.load-chunks.activate-climbing-entities", true)
+    }
+
+    override fun load() {
+        Optimize.loadChunks.spawnPhantoms = getBoolean("optimize.load-chunks.spawn-phantoms")
+        Optimize.loadChunks.activateClimbingEntities = getBoolean("optimize.load-chunks.activate-climbing-entities")
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/optimize/Minecart.kt b/src/main/kotlin/one/tranic/vine/config/module/optimize/Minecart.kt
new file mode 100644
index 0000000000000000000000000000000000000000..964842b453dea3af7465eaa5d6a4d228d72e9ddd
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/optimize/Minecart.kt
@@ -0,0 +1,24 @@
+package one.tranic.vine.config.module.optimize
+
+import one.tranic.vine.config.VineConfig.Optimize
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.util.ConfigHelper
+
+object Minecart : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "optimize.minecart.enabled", true,
+            listOf(
+                "Enable this feature to handle large amount of stacked Minecart better.",
+                "By skipping tick collisions to reduce expense getting entities list",
+                "and bukkit event calls, useful for the anarchy server."
+            )
+        )
+        addDefault("optimize.minecart.skipTickCount", 30)
+    }
+
+    override fun load() {
+        Optimize.Minecart.enabled = getBoolean("optimize.minecart.enabled")
+        Optimize.Minecart.skipTickCount = getInt("optimize.minecart.skipTickCount")
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/optimize/TurtleEggSearch.kt b/src/main/kotlin/one/tranic/vine/config/module/optimize/TurtleEggSearch.kt
new file mode 100644
index 0000000000000000000000000000000000000000..8e238362542bd30201eb1919b7b75fdc0fc4518c
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/optimize/TurtleEggSearch.kt
@@ -0,0 +1,28 @@
+package one.tranic.vine.config.module.optimize
+
+import one.tranic.vine.config.VineConfig.Optimize
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.util.ConfigHelper
+
+object TurtleEggSearch : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault(
+            "optimize.zombie-search-and-destroy-turtle-egg.enabled",
+            false,
+            "If true, optimizes the expensive searching done to find a turtle egg to crush, for zombies/husks, by default fully disabling it"
+        )
+        addDefault(
+            "optimize.zombie-search-and-destroy-turtle-egg.percent-chance",
+            40,
+            "Percent chance to run for task: zombie seeking turtle eggs to destroy"
+        )
+    }
+
+    override fun load() {
+        Optimize.TurtleEggSearch.enabled =
+            getBoolean("optimize.zombie-search-and-destroy-turtle-egg.enabled")
+        Optimize.TurtleEggSearch.percentChance =
+            getInt("optimize.zombie-search-and-destroy-turtle-egg.percent-chance")
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/module/optimize/Value.kt b/src/main/kotlin/one/tranic/vine/config/module/optimize/Value.kt
new file mode 100644
index 0000000000000000000000000000000000000000..77e6d65fb0c92d0d32f0563ef3cbe8482dd5efe3
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/module/optimize/Value.kt
@@ -0,0 +1,43 @@
+package one.tranic.vine.config.module.optimize
+
+import one.tranic.vine.config.VineConfig.Optimize
+import one.tranic.vine.config.impl.ConfigImpl
+import one.tranic.vine.config.util.ConfigHelper
+
+object Value : ConfigImpl, ConfigHelper() {
+    override fun default() {
+        addDefault("optimize.acquire-poi-for-stuck-entity", 60, "Reduce acquire POI for stuck entities")
+        addDefault(
+            "optimize.faster-structure-gen-future-sequencing",
+            false,
+            "May cause the inconsistent order of future compose tasks."
+        )
+        addDefault("optimize.floating-point-positive", false)
+        addDefault("optimize.max-entities-to-reduce-pathfinding-rates", 2)
+        addDefault(
+            "optimize.mob-re-pathfinding",
+            true,
+            "If true, disables the frequent pathfinds done while already following a path"
+        )
+        addDefault("optimize.noise-generation", true)
+        addDefault(
+            "optimize.skip-self-raid-check",
+            false,
+            listOf(
+                "Whether to skip some raid checks.",
+                "Enabling this will significantly reduce the server's performance."
+            )
+        )
+    }
+
+    override fun load() {
+        Optimize.acquirePoiForStuckEntity = getInt("optimize.acquire-poi-for-stuck-entity")
+        Optimize.fasterStructureGenFutureSequencing = getBoolean("optimize.faster-structure-gen-future-sequencing")
+        Optimize.floatingPointPositive = getBoolean("optimize.floating-point-positive")
+        Optimize.maxEntitiesToReducePathfindingRates = getInt("optimize.max-entities-to-reduce-pathfinding-rates")
+        Optimize.mobRePathfinding = getBoolean("optimize.mob-re-pathfinding")
+        Optimize.noiseGeneration = getBoolean("optimize.noise-generation")
+        Optimize.skipSelfRaidCheck = getBoolean("optimize.skip-self-raid-check")
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/vine/config/util/ConfigHelper.kt b/src/main/kotlin/one/tranic/vine/config/util/ConfigHelper.kt
new file mode 100644
index 0000000000000000000000000000000000000000..ba49e9075843cacf74b43da8da84dbbe0fc725c7
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/config/util/ConfigHelper.kt
@@ -0,0 +1,77 @@
+package one.tranic.vine.config.util
+
+import one.tranic.vine.config.ConfigUtil
+
+open class ConfigHelper {
+    // Vine start - Configuration file tools
+    fun addDefault(path: String, value: Any) {
+        ConfigUtil.getConfiguration().addDefault(path, value)
+    }
+
+    fun addDefault(path: String, value: Any, comment: String) {
+        ConfigUtil.getConfiguration().addDefault(path, value)
+        ConfigUtil.getConfiguration().setComments(path, listOf(comment))
+    }
+
+    fun addComment(path: String, comment: String) {
+        ConfigUtil.getConfiguration().setComments(path, listOf(comment))
+    }
+
+    fun addComment(path: String, comment: List<String>) {
+        ConfigUtil.getConfiguration().setComments(path, comment)
+    }
+
+    fun addDefault(path: String, value: Any, comment: List<String>) {
+        ConfigUtil.getConfiguration().addDefault(path, value)
+        ConfigUtil.getConfiguration().setComments(path, comment)
+    }
+
+    fun getBoolean(path: String): Boolean {
+        return ConfigUtil.getConfiguration().getBoolean(path)
+    }
+
+    fun getBoolean(path: String, function: (it: Boolean) -> Unit) {
+        function(getBoolean(path))
+    }
+
+    fun getDouble(path: String): Double {
+        return ConfigUtil.getConfiguration().getDouble(path)
+    }
+
+    fun getDouble(path: String, function: (it: Double) -> Unit) {
+        function(getDouble(path))
+    }
+
+    fun getInt(path: String): Int {
+        return ConfigUtil.getConfiguration().getInt(path)
+    }
+
+    fun getInt(path: String, function: (it: Int) -> Unit) {
+        function(getInt(path))
+    }
+
+    fun getString(path: String): String? {
+        return ConfigUtil.getConfiguration().getString(path)
+    }
+
+    fun getString(path: String, function: (it: String?) -> Unit) {
+        function(getString(path))
+    }
+
+    fun getList(path: String): MutableList<*>? {
+        return ConfigUtil.getConfiguration().getList(path)
+    }
+
+    fun getStringList(path: String): MutableList<String> {
+        return ConfigUtil.getConfiguration().getStringList(path)
+    }
+
+    fun getStringList(path: String, function: (it: MutableList<String>) -> Unit) {
+        function(getStringList(path))
+    }
+
+    fun getMapList(path: String): MutableList<MutableMap<*, *>> {
+        return ConfigUtil.getConfiguration().getMapList(path)
+    }
+    // Vine end - Configuration file tools
+}
\ No newline at end of file
