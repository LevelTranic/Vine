From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 18 Aug 2024 09:16:06 +0800
Subject: [PATCH] vmp: TypeFilterableList

Source in https://github.com/RelativityMC/VMP-fabric

com.ishland.vmp.common.general.collections.ITypeFilterableList;

diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index 038710ba934a9a57815dfe9f414b98223b848385..efacb3871281072084b931221d3509ae077885a5 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -2,8 +2,6 @@ package net.minecraft.util;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterators;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import java.util.AbstractCollection;
 import java.util.Collection;
 import java.util.Collections;
@@ -11,12 +9,11 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import net.minecraft.Util;
 
-public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
-    private final Map<Class<?>, List<T>> byClass = Maps.newHashMap();
+public class ClassInstanceMultiMap<T> extends AbstractCollection<T> implements one.tranic.vine.util.vmp.ITypeFilterableList {
+    private final Map<Class<?>, List<T>> byClass = new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>();
     private final Class<T> baseClass;
-    private final List<T> allInstances = Lists.newArrayList();
+    private final List<T> allInstances = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>();
 
     public ClassInstanceMultiMap(Class<T> elementType) {
         this.baseClass = elementType;
@@ -55,19 +52,40 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
         return this.find(object.getClass()).contains(object);
     }
 
+    @Override
+    public Object[] getBackingArray() {
+        return ((it.unimi.dsi.fastutil.objects.ObjectArrayList<T>) this.allInstances).elements();
+    }
+
+    /**
+     * @author ishland
+     * @reason use fastutil array list for faster iteration & use array for filtering iteration
+     */
     public <S> Collection<S> find(Class<S> type) {
+        List<T> cached = this.byClass.get(type);
+        if (cached != null) return (Collection<S>) cached;
+
         if (!this.baseClass.isAssignableFrom(type)) {
             throw new IllegalArgumentException("Don't know how to search for " + type);
         } else {
-            List<? extends T> list = this.byClass
-                .computeIfAbsent(type, typeClass -> this.allInstances.stream().filter(typeClass::isInstance).collect(Util.toMutableList()));
-            return (Collection<S>)Collections.unmodifiableCollection(list);
+            List<? extends T> list = this.byClass.computeIfAbsent(type,
+                    typeClass -> {
+                        it.unimi.dsi.fastutil.objects.ObjectArrayList<T> ts = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(this.allInstances.size());
+                        for (Object _allElement : ((it.unimi.dsi.fastutil.objects.ObjectArrayList<T>) this.allInstances).elements()) {
+                            if (typeClass.isInstance(_allElement)) {
+                                ts.add((T) _allElement);
+                            }
+                        }
+                        return ts;
+                    }
+            );
+            return (Collection<S>) list;
         }
     }
 
     @Override
     public Iterator<T> iterator() {
-        return (Iterator<T>)(this.allInstances.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.allInstances.iterator()));
+        return this.allInstances.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.allInstances.iterator());
     }
 
     public List<T> getAllInstances() {
diff --git a/src/main/java/one/tranic/vine/util/vmp/ITypeFilterableList.java b/src/main/java/one/tranic/vine/util/vmp/ITypeFilterableList.java
new file mode 100644
index 0000000000000000000000000000000000000000..46ba1e372b65ebf97df2bbf95df01e5530bb77e1
--- /dev/null
+++ b/src/main/java/one/tranic/vine/util/vmp/ITypeFilterableList.java
@@ -0,0 +1,8 @@
+package one.tranic.vine.util.vmp;
+
+// Source in https://github.com/RelativityMC/VMP-fabric
+// com.ishland.vmp.common.general.collections.ITypeFilterableList;
+
+public interface ITypeFilterableList {
+    Object[] getBackingArray();
+}
