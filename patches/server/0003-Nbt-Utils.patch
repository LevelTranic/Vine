From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Thu, 15 Aug 2024 16:49:08 +0800
Subject: [PATCH] Nbt Utils


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6b2c2e2f782630a3b7e25532260cc61e02c8049f..56a9760c28212ed448465b01682c2e6856191d5c 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -436,6 +436,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public boolean activatedPriorityReset = false; // Pufferfish - DAB
     public int activatedPriority = gg.pufferfish.pufferfish.PufferfishConfig.maximumActivationPrio; // Pufferfish - DAB (golf score)
     public final BlockPos.MutableBlockPos cachedBlockPos = new BlockPos.MutableBlockPos(); // Pufferfish - reduce entity allocations
+    private CompoundTag vineStorage = new CompoundTag(); // Vine - Vine data bundler
 
     public void setOrigin(@javax.annotation.Nonnull Location location) {
         this.origin = location.toVector();
@@ -2604,6 +2605,8 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 nbttagcompound.putBoolean("Purpur.FireImmune", immuneToFire);
             }
             // Purpur end
+
+            nbttagcompound.put("Vine.Storage", vineStorage); // Vine - vine data bundler
             return nbttagcompound;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -2756,6 +2759,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 immuneToFire = nbt.getBoolean("Purpur.FireImmune");
             }
             // Purpur end
+            // Vine start - vine data bundler
+            if (nbt.contains("Vine.Storage")) {
+                vineStorage = nbt.getCompound("Vine.Storage");
+            }
+            // Vine end - vine data bundler
 
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
@@ -5193,4 +5201,8 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return false;
     }
     // Purpur end
+    // Vine start - vine data bundler
+    public CompoundTag requestVineStorage() {
+        return vineStorage;
+    }
 }
diff --git a/src/main/kotlin/one/tranic/vine/nbt/Portal.kt b/src/main/kotlin/one/tranic/vine/nbt/Portal.kt
new file mode 100644
index 0000000000000000000000000000000000000000..9c7b0feaa5ff7ea80ed8f67fd6a39321b0144bc3
--- /dev/null
+++ b/src/main/kotlin/one/tranic/vine/nbt/Portal.kt
@@ -0,0 +1,24 @@
+package one.tranic.vine.nbt
+
+import net.minecraft.server.MinecraftServer
+import net.minecraft.world.entity.player.Player
+
+object Portal {
+    fun getAllowSpecPortal(p: org.bukkit.entity.Player): Boolean {
+        val minecraftPlayer = MinecraftServer.getServer().playerList.getPlayer(p.uniqueId)
+        return if (minecraftPlayer != null) getAllowSpecPortal(minecraftPlayer) else false
+    }
+
+    fun getAllowSpecPortal(p: Player): Boolean {
+        return p.requestVineStorage().getBoolean("SPEC_PORTAL")
+    }
+
+    fun setAllowSpecPortal(p: org.bukkit.entity.Player) {
+        MinecraftServer.getServer().playerList.getPlayer(p.uniqueId)?.let { setAllowSpecPortal(it) }
+    }
+
+    fun setAllowSpecPortal(p: Player) {
+        val s = !p.requestVineStorage().getBoolean("SPEC_PORTAL")
+        p.requestVineStorage().putBoolean("SPEC_PORTAL", s)
+    }
+}
\ No newline at end of file
