From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Tue, 13 Aug 2024 10:11:40 +0800
Subject: [PATCH] Vine Config


diff --git a/src/main/java/one/tranic/vine/config/VineConfig.java b/src/main/java/one/tranic/vine/config/VineConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b5e620936801cff2f4776bf295155fbe2df844f
--- /dev/null
+++ b/src/main/java/one/tranic/vine/config/VineConfig.java
@@ -0,0 +1,102 @@
+package one.tranic.vine.config;
+
+import one.tranic.vine.region.Compression;
+import one.tranic.vine.region.Format;
+
+public class VineConfig {
+    public static class Fix {
+        /**Fixed the bug that the display frame in water was destroyed by TNT.*/
+        public static boolean explosionBreaksItemFrameInWater = false;
+        /**Fixes some entities not bouncing on slime blocks and getting stuck*/
+        public static boolean incorrectBounceLogic = false;
+        /**Ensures correct destinations when travelling back and forth through Nether Portals in Multiplayer.*/
+        public static boolean netherPortal = false;
+        public static boolean villagersDontReleaseMemory = false;
+        /**
+         * Fixed a bug in Paper where anvils could become drops at y=0 or y=-1.
+         * This may not be useful as the implementation is crude, you can install the fix plugin to fix it additionally if you can.
+         */
+        public static class AnvilDrop {
+            public static boolean enabled = true;
+            public static boolean debug = false;
+        }
+    }
+
+    public static class Feature {
+        /**This just removes spark from being loaded by default, if you disable it, or install spark yourself, it will still be loaded.*/
+        public static boolean disableSpark = true;
+        /**If the player is blocked on the top of the player's head, he will not try to rebirth the player on the ceiling.*/
+        public static boolean disableRespawnCeiling = false;
+        public static boolean flattenTriangularDistribution = false;
+        /**
+         * Switch to a 1024-bit secure seed to protect it from being cracked.
+         * Destroy the ambitions of those cheaters.
+         * Of course I haven't confirmed whether it's really possible XD
+         */
+        public static boolean secureSeed = false;
+        /**
+         * Try virtual threads. Once enabled, all explicit platform threads
+         * will be replaced with virtual threads as much as possible, which
+         * may have some adverse consequences. Please enable it with caution.
+         */
+        public static boolean tryVirtualThreads = false;
+        public static boolean vanillaHopper = false;
+        /**zero tick plants is back now*/
+        public static boolean zeroTickPlants = false;
+
+        public static class cachePlayerProfileResult {
+            public static boolean enabled = true;
+            public static int timeout = 1440;
+        }
+        /**
+         * This can prevent some devices that utilize vanilla abilities from being
+         * damaged when the server crashes or shuts down suddenly, but it is not a
+         * panacea, so take precautions.
+         */
+        public static class DSE {
+            /**Do not save tnt entities*/
+            public static boolean primedTNT = false;
+            /** Do not save falling blocks*/
+            public static boolean fallingBlock = false;
+        }
+
+        public static class Region {
+            /**Support: ANVIL (Vanilla), LINEAR, SECTORFILE*/
+            public static Format format = Format.ANVIL;
+            /**Only SECTORFILE | Support: GZIP, ZLIB, LZ4, BROTLI (Only Tranic Server), SNAPPY (Only Tranic Server), ZSTD*/
+            public static Compression compressionFormat = Compression.ZSTD;
+            /**Only LINEAR | 1-15*/
+            public static int compressionLevel = 1;
+            /**Only LINEAR | flush second*/
+            public static int flushFrequency = 5;
+        }
+    }
+
+    public static class Optimize {
+        /**May cause the inconsistent order of future compose tasks.*/
+        public static boolean fasterStructureGenFutureSequencing = false;
+        public static boolean floatingPointPositive = false;
+        /**
+         * Entity re-pathing optimization
+         * If the entity has already determined the path, it will not search the path as frequently.
+         */
+        public static boolean mobRePathfinding = true;
+        /**As the name suggests, it can slightly improve world generation performance, maybe.*/
+        public static boolean noiseGeneration = true;
+        public static boolean skipSelfRaidCheck = false;
+        public static class loadChunks {
+            public static boolean spawnPhantoms = true;
+            public static boolean activateClimbingEntities = true;
+        }
+        /**Optimize stacked minecarts*/
+        public static class Minecart {
+            public static boolean enabled = true;
+            public static int skipTickCount = 30;
+        }
+
+        public static class TurtleEggSearch {
+            public static boolean enabled = false;
+            public static int percentChance = 40;
+        }
+    }
+}
diff --git a/src/main/java/one/tranic/vine/region/Compression.java b/src/main/java/one/tranic/vine/region/Compression.java
new file mode 100644
index 0000000000000000000000000000000000000000..6e8be5b0d3e9f4f37be23d1069a5750115084f55
--- /dev/null
+++ b/src/main/java/one/tranic/vine/region/Compression.java
@@ -0,0 +1,52 @@
+package one.tranic.vine.region;
+
+public enum Compression {
+    GZIP,
+    ZLIB,
+    LZ4,
+    NONE,
+    ZSTD,
+    BROTLI,
+    SNAPPY;
+
+    private static Compression now;
+
+    public static boolean equals(Compression input) {
+        return input.ordinal() == now.ordinal();
+    }
+
+    @Override
+    public String toString() {
+        return switch (this) {
+            case GZIP -> "GZIP";
+            case ZLIB -> "ZLIB";
+            case LZ4 -> "LZ4";
+            case ZSTD -> "ZSTD";
+            case BROTLI -> "BROTLI";
+            case SNAPPY -> "SNAPPY";
+            default -> "NONE";
+        };
+    }
+
+    public static Compression getCompression(final String name) {
+        return switch (name) {
+            case "GZIP" -> GZIP;
+            case "ZLIB" -> ZLIB;
+            case "LZ4" -> LZ4;
+            case "ZSTD" -> ZSTD;
+            case "BROTLI" -> BROTLI;
+            case "SNAPPY" -> SNAPPY;
+            default -> NONE;
+        };
+    }
+
+    public static Compression getNow() {
+        return now;
+    }
+
+    public static void setNow(final Compression now) {
+        if (Compression.now != null) throw new RuntimeException("Disallow reassignment to \"now\".");
+        one.tranic.vine.config.VineConfig.Feature.Region.compressionFormat = now;
+        Compression.now = now;
+    }
+}
diff --git a/src/main/java/one/tranic/vine/region/Format.java b/src/main/java/one/tranic/vine/region/Format.java
new file mode 100644
index 0000000000000000000000000000000000000000..cd4967fd8341c33ef88f987a13c1ab3a665408bc
--- /dev/null
+++ b/src/main/java/one/tranic/vine/region/Format.java
@@ -0,0 +1,40 @@
+package one.tranic.vine.region;
+
+public enum Format {
+    ANVIL,
+    LINEAR,
+    SECTORFILE;
+
+    private static Format now;
+
+    public static boolean equals(Format input) {
+        return input.ordinal() == now.ordinal();
+    }
+
+    @Override
+    public String toString() {
+        return switch (this) {
+            case ANVIL -> "ANVIL";
+            case LINEAR -> "LINEAR";
+            case SECTORFILE -> "SECTORFILE";
+        };
+    }
+
+    public static Format getFormat(String format) {
+        return switch (format) {
+            case "LINEAR" -> LINEAR;
+            case "SECTORFILE" -> SECTORFILE;
+            default -> ANVIL;
+        };
+    }
+
+    public static Format getNow() {
+        return now;
+    }
+
+    public static void setNow(Format now) {
+        if (Format.now != null) throw new RuntimeException("Disallow reassignment to \"now\".");
+        one.tranic.vine.config.VineConfig.Feature.Region.format = now;
+        Format.now = now;
+    }
+}
